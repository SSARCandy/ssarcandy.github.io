{"meta":{"title":"SSARCandy","subtitle":"","description":"","author":"許書軒","url":"https://ssarcandy.tw"},"pages":[{"title":"About","date":"2016-08-10T16:39:10.655Z","updated":"2016-08-10T16:39:10.655Z","comments":false,"path":"about/index.html","permalink":"https://ssarcandy.tw/about/index.html","excerpt":"","text":"drflkgtkre"},{"title":"Projects","date":"2016-08-10T16:39:10.671Z","updated":"2016-08-10T16:39:10.671Z","comments":false,"path":"projects/index.html","permalink":"https://ssarcandy.tw/projects/index.html","excerpt":"","text":""},{"title":"","date":"2016-08-10T16:39:10.671Z","updated":"2016-08-10T16:39:10.671Z","comments":false,"path":"tags/index.html","permalink":"https://ssarcandy.tw/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"用 Travis CI 自動部屬 hexo 到 GitHub","slug":"hexo-auto-deploy","date":"2016-07-28T16:51:43.000Z","updated":"2016-08-10T16:39:10.655Z","comments":true,"path":"2016/07/28/hexo-auto-deploy/","link":"","permalink":"https://ssarcandy.tw/2016/07/28/hexo-auto-deploy/","excerpt":"其實 hexo 作者 TC 已經有發過一篇文章在講這個主題了，也講得很清楚了，基本上矇著眼睛照做就行了。而這篇主要是再補充幾個細節。","text":"其實 hexo 作者 TC 已經有發過一篇文章在講這個主題了，也講得很清楚了，基本上矇著眼睛照做就行了。而這篇主要是再補充幾個細節。 SSH KEY 矇著眼照做那篇，到這行: 1$ travis encrypt-file ssh_key --add 這邊會幫你上傳 ssh_key 到 Travis 上，--add這個flag可以幫你插入解密指令到.travis.yml的before_install。 不過這flag真的很機車，會把你的.travis.yml排版全搞亂，順便把註解刪光光！ 建議不要加--add自己手動插入解密指令，排版就不會亂掉。 另外，如果因某種天災人禍導致忘記或沒辦法用指令插入解密指令，還是可以上 Travis 上的設定中看到環境變數名稱。 repository > more options 可以設定、看到 Travis 的環境變數 USE SSH Travis 是用 GitHub 的 Deploy key 來存取 repository 的，關於如何產生以及設定 Deploy key 都照著 TC 那篇文章做就可以了。 如果不幸在hexo deploy時遇到錯誤如下: 12remote: Invalid username or password.fatal: Authentication failed for &quot;....&quot; 那可以檢查一下 hexo 的_config.yml deploy的部分，要用 ssh 的形式設定 repository _config.yml1234deploy: type: git repo: git@github.com:SSARCandy/ssarcandy.github.io.git branch: master SETTING UP .travis.yml我這個網站結構如下: [develop] -&gt; default branch，我在這條 branch 新增文章、修改樣式等等[master] -&gt; 放 static-files，也就是 hexo generate 出來的東東 讓 Travis 自動部屬時，Clone 的是 develop branch， 經過hexo generate後推到master branch 上，為了避免 forced-update，在.travis.yml中需要再設定一下。 附上我的 .travis.yml，基本上跟 TC 那篇 87% 像啦…title: .travis.yml123456789101112131415161718192021222324252627282930313233language: node_jsnode_js: - \"4\" before_install: # Decrypt the private key - openssl aes-256-cbc -K $encrypted_d7634ff77415_key -iv $encrypted_d7634ff77415_iv -in .travis/ssh_key.enc -out ~/.ssh/id_rsa -d # Set the permission of the key - chmod 600 ~/.ssh/id_rsa # Start SSH agent - eval $(ssh-agent) # Add the private key to the system - ssh-add ~/.ssh/id_rsa # Copy SSH config - cp .travis/ssh_config ~/.ssh/config # Set Git config - git config --global user.name \"ssarcandy\" - git config --global user.email ssarcandy@gmail.com # Install Hexo - npm install hexo -g # Clone the repository - git clone https://github.com/SSARCandy/ssarcandy.github.io .deploy_git # My static-files store on master branch - cd .deploy_git &amp;&amp; git checkout master - cd .. script: - hexo generate - hexo deploy branches: only: - develop 比較需要解說的是這段1234# Clone the repository- git clone https://github.com/SSARCandy/ssarcandy.github.io .deploy_git- cd .deploy_git &amp;&amp; git checkout master- cd .. .deploy_git是 hexo 會產生的資料夾，用於紀錄 git history，不過由於每次 clone 都是全新的，所以每次.deploy_git也都會是新的，這會導致每次更新都會是 forced-update。所以，複製一份 repo (at master branch)，並改名叫.deploy_git就是為了讓新產生出的靜態檔案可以有之前的 git history，就可以避免 forced-update。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ssarcandy.tw/tags/hexo/"},{"name":"CI","slug":"CI","permalink":"https://ssarcandy.tw/tags/CI/"}]},{"title":"自動分享每日天文圖(APOD)到 Dcard","slug":"bot-battle","date":"2016-07-26T16:16:45.000Z","updated":"2016-08-10T16:39:10.655Z","comments":true,"path":"2016/07/26/bot-battle/","link":"","permalink":"https://ssarcandy.tw/2016/07/26/bot-battle/","excerpt":"原本其實只是要做個 Slack bot，因為我懶得每天都上 APOD 官網看…乾脆做個 bot 每天都會在中午 12:30 發今日的圖跟說明到 Slack channel 裡～","text":"原本其實只是要做個 Slack bot，因為我懶得每天都上 APOD 官網看…乾脆做個 bot 每天都會在中午 12:30 發今日的圖跟說明到 Slack channel 裡～自動發文到 slack channel 裡，然後還隨機搭配內容農場風格的一句話。 不過除了我自己以外好像都沒什麼人捧場，幾乎都被無視 QQDavid老師 還表示很煩要我關掉 (明明一天才 Po 一次啊啊啊 ಠ_ಠ 所以我只好忍痛取消這個 Slack bot，改成直接用 Direct message 傳給 David老師 XD 結果 David老師 也做了個每半小時就發名言佳句給我的 bot，害我只好也把我的 bot 改成每十分鐘隨機發天文圖給他，看誰比較耐得住煩～每半小時發給我一句名言佳句，真是世界煩。 當然這種互相毀滅的 bot 大戰持續沒多久就在雙方讓步之下都停止了….. — 以上都是前言 — 即使 Slack 上都沒人要鳥我，我還是秉持著推廣基礎天文教育的偉大理念，認為優質的每日天文圖的不應該被埋沒，要讓這樣優質的內容給更多人接觸到！最後突然想到：「不然乾脆發在 Dcard 廢版好了，那邊最多人在看了而且不受版規限制」可是懶人如我是不可能每天上去 Po 文的，所以又寫了個 bot 每天中午戳 Dcard API，發優質天文圖到廢版(廢文？發廢文到廢版 結果意外反應還不錯？還有人想要我整理系列文，不愧是廢版版友，就是有眼光！大家都很捧場，覺得溫馨 ╰(〞︶〝) ╯ 不知道要過多久才會有人會發現這都是 bot 在發文 XDD –最後自己推銷一下，由於 APOD 只有 NASA 有提供官方 API，除了英文以外其他語言的子站(像是中文版)都沒辦法簡單的取得內容，所以我寫了一個 npm 套件，專門處理取得指定日期、指定語言的 APOD 內容。Github: https://github.com/SSARCandy/node-apodDemo: http://ssarcandy.tw/node-apod/demo.html","categories":[],"tags":[{"name":"trashtalk","slug":"trashtalk","permalink":"https://ssarcandy.tw/tags/trashtalk/"}]},{"title":"Setting up OpenCV using Cmake GUI","slug":"Setting-up-OpenCV-using-Cmake-GUI","date":"2016-07-22T16:46:45.000Z","updated":"2016-08-10T16:39:10.655Z","comments":true,"path":"2016/07/22/Setting-up-OpenCV-using-Cmake-GUI/","link":"","permalink":"https://ssarcandy.tw/2016/07/22/Setting-up-OpenCV-using-Cmake-GUI/","excerpt":"Build OpenCV Download OpenCV and Cmake Build opencv with cmake Press configure, choose visual studio 2015, finish Then press generate","text":"Build OpenCV Download OpenCV and Cmake Build opencv with cmakeCmake configuration Press configure, choose visual studio 2015, finish Then press generate Open OpenCV.sln under build/ Build it using Debug, Release Right click > build right click &gt; build switch to Release mode and build again [Windows] Setting up environment variable add &lt;opencv&gt;/bin into PATHAdd new environment variable add new env named OpenCV_DIR, value as &lt;opencv&gt;/build it may need logout to apply setting, you can check it by echo %PATH%, echo %OpenCV_DIR% Build with EXTRA MODULES In step 2. Build opencv with cmake, press configure Set up OPENCV_EXTRA_MODULES_PATH to proper path(&lt;opencv_contrib&gt;/modules) Set OPENCV_EXTRA_MODULES_PATH as opencv_contrib/modules Press configure again, then generate To see more details instructions, see opencv_contrib README Travis.yml exampletitle: travis.yml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061language: - cpp sudo: required compiler: - gcc # building opencv is time consuming, caching it is bettercache: apt: true ccache: true directories: - opencv-3.1.0 - opencv_contrib-3.1.0 install: # OpenCV dependencies - Details available at: http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html - sudo apt-get install -y build-essential - sudo apt-get install -y cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev - sudo apt-get install -y python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev # Download v3.1.0 .zip file and extract. - curl -sL https://github.com/Itseez/opencv/archive/3.1.0.zip &gt; opencv.zip - unzip -n opencv.zip &gt; log1 # Download EXTRA MODULES and extract. - curl -sL https://github.com/Itseez/opencv_contrib/archive/3.1.0.zip &gt; opencv_contrib.zip - unzip -n opencv_contrib.zip &gt; log2 # Create a new 'build' folder. - cd opencv-3.1.0 - mkdir -p build - cd build # if Makefile is cached, then skip cmake opencv # Set build instructions for Ubuntu distro. - cat Makefile &gt; l1 || cmake -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-3.1.0/modules CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON .. # if Makefile is cached, then skip make opencv # Run 'make' with four threads. - cat Makefile &gt; l2 ||make -j5 &gt; make_log # Install to OS. - sudo make install # Add configuration to OpenCV to tell it where the library files are located on the file system (/usr/local/lib) - sudo sh -c 'echo \"/usr/local/lib\" &gt; /etc/ld.so.conf.d/opencv.conf' - sudo ldconfig - echo \"OpenCV installed.\" # We need to return to the repo \"root\" folder, so we can then 'cd' into the C++ project folder. - cd ../../ - ls -al script: - cmake CMakeLists.txt - make - \"./a.out &gt; log1.txt\"","categories":[],"tags":[{"name":"cmake","slug":"cmake","permalink":"https://ssarcandy.tw/tags/cmake/"}]}]}