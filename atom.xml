<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SSARCandy&#39;s Blog</title>
  
  
  <link href="https://ssarcandy.tw/atom.xml" rel="self"/>
  
  <link href="https://ssarcandy.tw/"/>
  <updated>2024-11-22T00:45:40.453Z</updated>
  <id>https://ssarcandy.tw/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Run Unix-like Server on Android</title>
    <link href="https://ssarcandy.tw/2023/04/09/run-unix-server-on-android/"/>
    <id>https://ssarcandy.tw/2023/04/09/run-unix-server-on-android/</id>
    <published>2023-04-09T09:56:43.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[    <div>      <img src="/img/2023-04-09/01.png" alt="手機的硬體作為伺服器其實相當夠用。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">手機的硬體作為伺服器其實相當夠用。</span>    </div><span id="more"></span><p>最近正好汰換下來一台 Pixel 4a，正在想辦法將他的剩餘價值發揮到最大化。前篇 <a href="/2023/04/08/make-old-pixel-as-photo-uploader/" title="把舊的 Pixel 改造成無限照片上傳機">把舊的 Pixel 改造成無限照片上傳機</a> 已經發揮了一些價值，但是不夠！這次我要用這個手機來取代掉我長久以來租的雲端虛擬機，把月租費省下來。</p><h1 id="選擇安裝方法"><a href="#選擇安裝方法" class="headerlink" title="選擇安裝方法"></a>選擇安裝方法</h1><p>要用手機來取代雲端虛擬機器，其實還是有一些困難，首先家裡並沒有固定 IP，也就是說用手機來當作伺服器的話沒辦法在外面存取，如果有架設網站的需求的話那這肯定是行不通。<br>不過我的情況剛好不需要固定 IP，我要的其實是一個開發機兼永不停機的伺服器讓我可以在上面跑一些定時的工作或者是跑一些需要長時間運作的程式。</p><p>那接下來就是要來思考我需要什麼，主流在安卓設備上面跑 Unix Server 有兩種方式，一種是使用 Termux<sup>[1]</sup>，另一種是直接安裝完整的系統在手機上<sup>[2]</sup>。<br>Termux 的好處是安裝十分容易也不需要 root，壞處是他雖然是 Unix-like 的系統，但是算是閹割版，可能有少數一些指令或者 package 是沒辦法使用的；反之，直接安裝完整的系統那當然可以獲得最像是 Ubuntu 的體驗，但相對來講比較難裝較複雜，可能也免不了需要取得 root。</p><p>考量到基本上我只需要有可以開發及部屬 Python, node.js, C++ 的應用程式，所以我選擇使用 Termux 就好了。</p><h1 id="我的需求"><a href="#我的需求" class="headerlink" title="我的需求"></a>我的需求</h1><p>我的需求可以簡單列出：</p><ul><li>可以透過 ssh 存取</li><li>有 Python, node.js, C++ 開發環境</li><li>可以用 vscode 開發</li></ul><p>Termux 真的十分強大，大部分的指令都跟在使用 Ubuntu 一樣簡單，但我還是遇到了一些坑，特此紀錄一下。</p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>Termux 安裝好後，還需要安裝 openssh 等東西才能使我可以從外部 ssh 進去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pkg install openssh</span><br><span class="line">$ vim <span class="variable">$&#123;PREFIX&#125;</span>/etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># PasswordAuthentication yes</span></span><br><span class="line">$ sshd</span><br></pre></td></tr></table></figure><p><code>sshd</code> 也可以用 <code>screen</code> 等等的指令執行背景，就不會占用前景。<br>另外也可以用 ssh key 的方式登入，就不需要每次打密碼。<br>而 <code>$PREFIX</code> 是 Termux 的根目錄，一般常見的 <code>/usr</code>, <code>/etc</code> 等等路徑在 Termux 底下就會被對應至 <code>$PREFIX/usr</code>, <code>$PREFIX/etc</code></p><h2 id="Dev-Environments"><a href="#Dev-Environments" class="headerlink" title="Dev Environments"></a>Dev Environments</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">$ pkg install python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># node.js</span></span><br><span class="line">$ pkg install nodejs-lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># C++</span></span><br><span class="line">$ pkg install glib cmake gdb</span><br></pre></td></tr></table></figure><p>三行指令就安裝完絕大部分需要的工具。<br>另外開發 C++ 時經常需要 libboost，很可惜沒有辦法直接透過 <code>pkg install</code> ，但可以用原始碼編譯：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.tar.gz</span><br><span class="line">$ tar xvf boost_1_81_0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> boost_1_81_0</span><br><span class="line">$ ./bootstrap.sh --prefix=<span class="variable">$PREFIX</span></span><br><span class="line">$ ./b2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy header &amp; library to right place</span></span><br><span class="line">$ <span class="built_in">cp</span> -a boost /data/data/com.termux/files/usr/include</span><br><span class="line">$ <span class="built_in">cp</span> -a stage/lib/* /data/data/com.termux/files/usr/lib/</span><br></pre></td></tr></table></figure><p>安裝完後就可以用 cmake 找到 libboost.</p><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p>vscode 就相當多坑了…首先，vscode 無法透過 Remote-SSH 套件連線到 Termux，因為缺少必要的一些東西 (libstdc++, glibc 是閹割版)<sup>[3][4]</sup>。所以可以改安裝 code-server。<br>code-server 是一個 Web 版的 vscode，從介面到使用方式都與原生 vscode 十分相似，所以用這個也是完全可以接受的解決方式。</p><p>但要安裝 code-server 十分之困難，我後來找的一個<a href="https://www.youtube.com/watch?v=-Je02KP3268">全是韓文的影片</a>才順利安裝成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pkg install nodejs-lts python yarn binutils</span><br><span class="line">$ v=$(node -v); v=<span class="variable">$&#123;v#v&#125;</span>; v=<span class="variable">$&#123;v%%.*&#125;</span>;</span><br><span class="line">$ FORCE_NODE_VERSION=<span class="string">&quot;<span class="variable">$v</span>&quot;</span> yarn global add code-server@4.6.0 --ignore-engines;</span><br><span class="line"></span><br><span class="line"><span class="comment"># after installation done, launch it in screen</span></span><br><span class="line">$ screen -S code-server</span><br><span class="line">$ code-server --bind-addr 0.0.0.0:8080 --disable-telemetry</span><br></pre></td></tr></table></figure><p>然後就可以打開瀏覽器 <code>PRIVATE_IP:8080</code> 即可看見熟悉的 vscode 畫面。</p><p>但是事情沒有這麼簡單…這 vscode 壞掉的地方可不少，他 built-in Terminal 打不開，搜尋功能無法使用，Source Control 裝死….<br>經過一系列研究及嘗試後<sup>[5]</sup>，終於把全部都解決了…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### bulit-in Terminal cannot open</span></span><br><span class="line"><span class="comment"># [IPC Library: Pty Host] Unknown channel: ptyHost</span></span><br><span class="line"><span class="comment"># rejected promise not handled within 1 second: Unknown channel: Channel name &#x27;ptyHost&#x27; timed out after 1000ms</span></span><br><span class="line">$ sed -i -e <span class="string">&#x27;s|switch(process.platform)|switch(&quot;linux&quot;)|&#x27;</span> /data/data/com.termux/files/home/.config/yarn/global/node_modules/code-server/lib/vscode/out/vs/platform/terminal/node/ptyHostMain.js</span><br><span class="line"></span><br><span class="line"><span class="comment">### Search not working</span></span><br><span class="line"><span class="comment"># ...@vscode/ripgrep/bin/rg&#x27;: No such file or directory</span></span><br><span class="line">$ pkg install ripgrep</span><br><span class="line">$ <span class="built_in">cp</span> /data/data/com.termux/files/usr/bin/rg .config/yarn/global/node_modules/code-server/lib/vscode/node_modules/@vscode/ripgrep/bin/rg.config/yarn/global/node_modules/code-server/lib/vscode/node_modules/@vscode/ripgrep/bin/rg</span><br><span class="line"></span><br><span class="line"><span class="comment">### Source Control not working</span></span><br><span class="line"><span class="comment"># The folder currently open doesn&#x27;t have a git repository</span></span><br><span class="line">$ pkg install git</span><br><span class="line">$ vim ~/.local/share/code-server/Machine/settings.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;git.path&quot;</span>: <span class="string">&quot;/data/data/com.termux/files/usr/bin/git&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這些改完以後，記得重啟 code-server。</p><h1 id="其他有用的訣竅"><a href="#其他有用的訣竅" class="headerlink" title="其他有用的訣竅"></a>其他有用的訣竅</h1><h2 id="Monitor-CPU-Loading"><a href="#Monitor-CPU-Loading" class="headerlink" title="Monitor CPU Loading"></a>Monitor CPU Loading</h2><p>htop 在 non-root Termux 是半殘的，看不到 CPU loading，這是由於 Android 系統級別的設定，讓一般應用程式 (Termux 也算應用程式) 無法存取到 <code>/proc</code>。<br>所以可以改安裝 <code>pkg install neofetch</code>，他可以正確展示 CPU 使用量 (如本文首圖)，不知怎辦到的 哈哈。</p><h2 id="Turn-off-System-Task-Killer"><a href="#Turn-off-System-Task-Killer" class="headerlink" title="Turn off System Task Killer"></a>Turn off System Task Killer</h2><p>在安裝好所有東西以後，隔天我就發現無法 ssh 到手機上了，一看才發現被系統殺掉了。現在比較新版本的 Android OS (12+) 都有嚴格的執行緒限制，應該是 32 左右，這數字太小了會導致 Termux 經常被殺掉。<br>所以需要透過 adb 去把這個東西關掉<sup>[6]</sup>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For Android 12L &amp; Android 13:</span></span><br><span class="line">./adb shell <span class="string">&quot;settings put global settings_enable_monitor_phantom_procs false&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For Android 12：</span></span><br><span class="line">./adb shell <span class="string">&quot;/system/bin/device_config set_sync_disabled_for_tests persistent; /system/bin/device_config put activity_manager max_phantom_processes 2147483647&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Adjust-System-Time"><a href="#Adjust-System-Time" class="headerlink" title="Adjust System Time"></a>Adjust System Time</h2><p>Server 通常都要是 UTC 時間會比較方便，結果這其實不需要在 Termux 內用指令調整，只需要去手機 設定&gt;時間&gt;選擇時區 即可。</p><h2 id="Bind-MAC-address-to-Private-IP"><a href="#Bind-MAC-address-to-Private-IP" class="headerlink" title="Bind MAC address to Private IP"></a>Bind MAC address to Private IP</h2><p>由於手機是透過 WiFi 連上家用網路，private IP 是透過 DHCP 分配，但如果 IP 經常改變很不方便。<br>可以通過家用 router 去設定 mac address 綁定分配的 private IP 來避免 IP 跑掉。<br>(ASUS router 有這功能<sup>[7]</sup>，不確定其他廠牌有沒有)</p><h1 id="Compare-with-Cloud-VM"><a href="#Compare-with-Cloud-VM" class="headerlink" title="Compare with Cloud VM"></a>Compare with Cloud VM</h1><p>我原先在用的是 <strong>Nanode 1 GB</strong> (1 shared CPU + 1GB RAM)。記憶體只有 1GB 有時候會 Out of Memory 很不開心，效能方面我倒是覺得堪用。價格方面則是一個月 $5 USD，是 Linode 提供的虛擬機中最便宜的選擇<sup>[9]</sup>。<br>做了一些簡單的效能測試，看看 <strong>Nanode 1 GB</strong> v.s. <strong>Pixel 4a</strong> 是誰贏？</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Task1. Compile libboost v1.81.0]</span></span><br><span class="line"><span class="attr">Nanode</span> =  <span class="number">705.27</span>s user  <span class="number">48.27</span>s system  <span class="number">96</span>% cpu <span class="number">12</span>:<span class="number">57.18</span> total</span><br><span class="line"><span class="attr">Pixel4a</span>= <span class="number">4236.25</span>s user <span class="number">218.47</span>s system <span class="number">691</span>% cpu <span class="number">10</span>:<span class="number">44.36</span> total</span><br><span class="line"></span><br><span class="line"><span class="section">[Task2. Python check prime number]</span></span><br><span class="line"><span class="attr">Nanode</span> = <span class="number">19.27</span>s user <span class="number">0.00</span>s system <span class="number">99</span>% cpu <span class="number">19.305</span> total</span><br><span class="line"><span class="attr">Pixel4a</span>= <span class="number">25.62</span>s user <span class="number">0.01</span>s system <span class="number">99</span>% cpu <span class="number">25.681</span> total</span><br></pre></td></tr></table></figure><p>Task1 測試的所有 CPU 都滿載時的效能，很合理的 Pixel4a 有多顆 CPU 自然會贏過 Nanode;<br>Task2 是用 Python 寫的 <code>is_prime</code> script<sup>[10]</sup> ，用於測試單一 CPU 的性能，就可以發現其實手機的 CPU 還是偏爛，有差到 30%</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://wiki.termux.com/wiki/Main_Page">Termux Wiki</a></li><li><a href="https://home.gamer.com.tw/artwork.php?sn=5533738">連筆電都懶得帶? 那就在 Android 上跑 VS Code 吧! | Termux , PRoot , VS Code Server</a></li><li><a href="https://code.visualstudio.com/docs/remote/linux#_remote-host-container-wsl-linux-prerequisites">Remote host prerequisites</a></li><li><a href="https://github.com/microsoft/vscode-remote-release/issues/3769">SSH to Termux not working.</a></li><li><a href="https://github.com/coder/code-server/issues/5496">[Bug]: Terminal is not working on Termux.</a></li><li><a href="https://ivonblog.com/en-us/posts/fix-termux-signal9-error/">Fix [Process completed (signal 9) - press Enter] for Termux on Android 12+ devices</a></li><li><a href="https://www.asus.com/support/FAQ/1000906/">[Wireless Router] How to manually assign IP around the DHCP list?</a></li><li><a href="https://www.linode.com/blog/linode/akamai_cloud_computing_price_update/">Akamai’s Cloud Computing Services: Pricing Update</a></li><li><a href="https://www.linode.com/pricing/">Linode Pricing List</a></li><li><a href="https://gist.github.com/SSARCandy/14f339cf0d5b5b4a2069b0a51fbbc2b1">Python check prime number</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;div&gt;
      &lt;img src=&quot;/img/2023-04-09/01.png&quot; alt=&quot;手機的硬體作為伺服器其實相當夠用。&quot; data-action=&quot;zoom&quot; class=&quot;photozoom&quot;&gt;
      &lt;span class=&quot;zoom-initial-caption&quot;&gt;手機的硬體作為伺服器其實相當夠用。&lt;/span&gt;
    &lt;/div&gt;</summary>
    
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
    <category term="note" scheme="https://ssarcandy.tw/tags/note/"/>
    
    <category term="trashtalk" scheme="https://ssarcandy.tw/tags/trashtalk/"/>
    
  </entry>
  
  <entry>
    <title>把舊的 Pixel 改造成無限照片上傳機</title>
    <link href="https://ssarcandy.tw/2023/04/08/make-old-pixel-as-photo-uploader/"/>
    <id>https://ssarcandy.tw/2023/04/08/make-old-pixel-as-photo-uploader/</id>
    <published>2023-04-08T07:48:18.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>自從 Google Photos 養套殺，取消高畫質無限上傳以後<sup>[1]</sup>，對於我這種習慣使用 Google Photos 的人無疑是重大悲劇，空間用完指日可待。目前 Google Photos 的高畫質無限免費上傳是專門給 Pixel 2~5 的優待，只要是由這些型號的裝置上傳的照片，就可以享有這項福利，並不限制照片需使用這些裝置拍攝所得。為了蹭 Pixel 舊裝置可以以“高畫質”無限免費上傳 Google Photos，即使換了新手機，也應該想辦法由舊裝置來上傳相片。</p><span id="more"></span><p>這邊所謂 <strong>”高畫質”</strong> (Storage Saver) 其實是有壓縮的，目前只有 Pixel 1 可以免費 <strong>”原始畫質”</strong> (Original) 上傳，但對我而言有免費高畫質就很好了，直接省下訂閱 Google One 的費用。</p><p>如何達成這個任務呢？基本上的流程會是以下三個步驟：</p><ol><li>新手機拍攝照片</li><li>新手機將照片同步至舊手機</li><li>舊手機自動備份至 Google Photos</li></ol><p>但在這裡，需要注意的是，新手機不要開啟 Google Photos 備份功能，以免佔用雲端空間。</p><p>接下來，我們需要尋找一個雲端相片同步服務來當作中繼站，讓新手機拍攝的照片同步至舊手機的暫存空間，以利後續的備份。<br>在我的實作中，我選擇了 <a href="https://mega.io/mobile?aff=u4TkijWNntg">Mega</a> 和 <a href="https://play.google.com/store/apps/details?id=com.ttxapps.megasync">MegaSync</a>。</p>    <div>      <img src="/img/2023-04-08/01.png" alt="流程圖。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">流程圖。</span>    </div><p>上面流程圖簡單的展示了整個流程，接下來就是把需要的東西準備好：</p><ul><li>Pixel 5 or an earlier device</li><li>Google Photos 需安裝於新、舊手機</li><li><a href="https://mega.io/mobile?aff=u4TkijWNntg">Mega</a> 需安裝於新、舊手機</li><li><a href="https://play.google.com/store/apps/details?id=com.ttxapps.megasync">MegaSync</a> 需安裝於舊手機</li></ul><p>Mega 是一個雲端儲存服務，提供免費的 50GB 儲存空間<sup>[2]</sup>，註冊且下載至新手機以後以後，只要開啟 Camera Upload <sup>[3]</sup> 功能即可。空間方面也不用擔心耗盡，一方面是他有 50 GB，另一方面是我只是要將它當作一個暫存中繼站，只要後續備份完成，這邊的照片即可清空。</p><p>而 <a href="https://play.google.com/store/apps/details?id=com.ttxapps.megasync">MegaSync</a> 是一個第三方 app，功能類似於 <code>rsync</code> ，可以將 Mega 上面的指定資料夾下的檔案同步至手機地端，所以只要設定好要同步 Camera Upload 資料夾，就可以利用這個機制去下載我新手機所拍攝的照片到舊手機上。</p><p>至此，新手機拍攝的相片已經同步至舊手機，這時候只需要在舊手機的 Google Photos 開啟 <strong>“高畫質”</strong> 備份選項，一切就大功告成。</p><p>另外為了維持整個流程穩定，最好要把</p><ul><li>舊手機上將 <a href="https://play.google.com/store/apps/details?id=com.ttxapps.megasync">MegaSync</a> 的電池最佳化關閉，</li><li>新手機上將 <a href="https://mega.io/mobile?aff=u4TkijWNntg">Mega</a> 的電池最佳化關閉</li></ul><p>才不會被系統限制導致無法在背景執行這些程式。</p><p>總結來說，透過這樣的改造，我們可以輕鬆地享有 Google Photos 的高畫質無限免費上傳功能，並且也能賦予舊裝置一個新的功能而非擺在抽屜閒置。只要按照以上的步驟進行操作，就可以輕鬆地完成一台無限照片上傳機的改造。</p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://support.google.com/photos/answer/10100180?hl=zh-Hant">Google 相簿儲存空間政策更新</a></li><li>2020 年以後註冊的新帳戶，免費空間改為 20GB，<a href="https://help.mega.io/plans-storage/achievements/free-space">可透過一些任務升級至 50GB</a></li><li><a href="https://help.mega.io/installs-apps/mobile/camera-uploads">How to use camera uploads?</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;自從 Google Photos 養套殺，取消高畫質無限上傳以後&lt;sup&gt;[1]&lt;/sup&gt;，對於我這種習慣使用 Google Photos 的人無疑是重大悲劇，空間用完指日可待。目前 Google Photos 的高畫質無限免費上傳是專門給 Pixel 2~5 的優待，只要是由這些型號的裝置上傳的照片，就可以享有這項福利，並不限制照片需使用這些裝置拍攝所得。為了蹭 Pixel 舊裝置可以以“高畫質”無限免費上傳 Google Photos，即使換了新手機，也應該想辦法由舊裝置來上傳相片。&lt;/p&gt;</summary>
    
    
    
    
    <category term="trashtalk" scheme="https://ssarcandy.tw/tags/trashtalk/"/>
    
    <category term="automation" scheme="https://ssarcandy.tw/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>Optimizing C++ Compile Time</title>
    <link href="https://ssarcandy.tw/2022/06/11/optimizing-compile-time/"/>
    <id>https://ssarcandy.tw/2022/06/11/optimizing-compile-time/</id>
    <published>2022-06-11T10:26:10.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>編譯是靜態語言不可避免的步驟。對於開發者而言，編譯是個又愛又恨的東西，好處是他可以幫助在編譯時期找出部分的錯誤又可以幫忙最佳化，但是壞處則是編譯要時間，當專案越來越大時，小小改個檔案可能就要花數分鐘去等編譯。</p>    <div>      <img src="/img/2022-06-10/1.png" alt="source: https://xkcd.com/303/" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">source: https://xkcd.com/303/</span>    </div><span id="more"></span><p>隨著 C++ 的發展，現在 modern C++ 如 C++14, 17 等等，新增了更多方式讓開發者在編譯時期完成更多事情，比如說更方便的<code>if contexpr</code>等等功能。而這其實也是被鼓勵的，因為能在編譯時期就處理完的話就可以讓 runtime 執行得更快！</p><p>但當大量使用 template 或引用更多的 library 也讓 compiler 的工作越來越多，而如果每改幾行就要等待編譯幾分鐘才能知道執行結果的話，對於一天要編譯數百次的開發者而言實在是太浪費生命了。</p><p>本篇文章就要來探討各種加速 C++ Compile Time 的方式，大部分的方法都是 Stack Overflow 搜刮來，然後由我自行實測。測試環境如下：</p><ul><li>Ubuntu 18.04 LTS</li><li>GCC 9</li><li>CMake 3.23</li><li>Ninja 1.8</li><li>Project LOC ~20k</li></ul><h1 id="Use-ccache"><a href="#Use-ccache" class="headerlink" title="Use ccache"></a>Use ccache</h1><p>引入 <a href="https://ccache.dev/">ccache</a> 絕對是效益最高的加速方式，完全不用改程式就可以減少大量的編譯時間。ccache 是一個全域的 compiler cache，藉由快取編譯的中繼檔來節省重新編譯的時間。安裝好以後只要在 <code>CMakeLists.txt</code> 中加入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line">SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)</span><br></pre></td></tr></table></figure><p>即可使用<code>ccache</code>，如果專案沒使用 build tools 的話，則是直接在<code>gcc</code>指令前加上<code>ccache</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># before</span></span><br><span class="line">$ /usr/bin/gcc main.cpp</span><br><span class="line"><span class="comment"># after</span></span><br><span class="line">$ ccache /usr/bin/gcc main.cpp</span><br></pre></td></tr></table></figure><p>使用 ccache 之後整體編譯速度大約可以提升兩倍以上，十分讚！</p><h1 id="Use-forward-declaration-as-more-as-possible"><a href="#Use-forward-declaration-as-more-as-possible" class="headerlink" title="Use forward declaration as more as possible"></a>Use forward declaration as more as possible</h1><p>C++ 的 <code>#include</code> 關鍵字其實就是複製貼上，所以當你在 A.h include 了 B.h，在預處理階段編譯器會把 B.h 內容複製到 A.h，而如果不幸的 B.h 又 include 一堆檔案，那也會通通展開。所以如果引用太多檔案，除了會造成預處理之後檔案肥大以外，也會造成檔案之間相依性混亂，間接導致每次編譯要重新編譯不必要的檔案。</p><p>除了將沒用的 include 清乾淨以外，還可以更激進的避免在 header include 東西，那就是利用 forward declaration。</p>    <div>      <img src="/img/2022-06-10/2.png" alt="include tree" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">include tree</span>    </div><p>試想以上情境，當你變更 A.h 時，A B C 都必須重新編譯，因為內容改變了，但實際上 C 並未使用到 A，其實應該可以避免重新編譯 C。</p><p>由於 C 會重新編譯是因為 B.h 內容改變了，而 B.h 內容改變的原因則是因為 A.h 更新了。這時候可以檢視為甚麼 B.h 需要引用 A.h，看看是否可以避免引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// B.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;A.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"> <span class="comment">// ...skip</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="type">const</span> A&amp; a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上是常見的使用情境，B 存了一個 class A 的參考<code>A&amp; a</code>。</p><p>我們可以改寫成這樣，將 include 移至 B.cpp 實作檔中。這是因為<code>A&amp;</code>, <code>A*</code>等這類東西的大小是固定的，所以在定義時不需要知道實際 class A 的大小，只需先告知 compiler 有這個 class 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// B.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>; <span class="comment">//&lt; forward declare !</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"> <span class="comment">// ...skip</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="type">const</span> A&amp; a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// B.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;A.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>如此一來，當你變更 A.h 時，B.h 內容並不會改變，也就不會觸發 C 需要重新編譯拉，可喜可賀~</p><p>在大量使用這個技巧以後，我所測試的專案進步幅度也是非常明顯，更動 A.h 原本會牽動 54 個檔案需要重編譯，改完以後則只會牽動 29 個檔案，自然編譯速度也就變快了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># before use fwd v.s. after use fwd</span></span><br><span class="line"><span class="comment"># -j 6 incremental build, w/o ccache, unit in second</span></span><br><span class="line">[<span class="built_in">touch</span> A.h]</span><br><span class="line">before = 303 (trigger 54 files rebuild)</span><br><span class="line">after  = 178 (trigger 29 files rebuild)</span><br></pre></td></tr></table></figure><h1 id="Unity-Build"><a href="#Unity-Build" class="headerlink" title="Unity Build"></a>Unity Build</h1><p>Unity build 又稱 Jumbo build, Mega build，其原理是透過將<code>*.cpp</code>彙整成一個<code>all.cpp</code>再一起執行編譯，這樣就是省下 N 個檔案的編譯時間 (具體而言是省下如 template 展開等原本每個 Translate Unit 都要做的事情)。</p><p>CMake v3.16 開始就支援 <a href="https://cmake.org/cmake/help/latest/prop_tgt/UNITY_BUILD.html#prop_tgt:UNITY_BUILD">Unity Build</a> 的設定，他支援將 batch size 個檔案先匯總成<code>all_x.cpp</code>之後再進行編譯。</p><p>不過這方法會遇到一些問題，由於這方法之原理說白了就是<code>cat *.cpp &gt; all.cpp</code>如此暴力，如果專案本身常常使用全域變數的話，這會很容易導致 ODR (One definition rule) 錯誤。所以也有可能不容易引入 Unity Build。</p><p>這個技巧我認為也是 CP 值十分之高的方法，幾乎不用改程式 (如果專案用太多全域變數就要改很多😅) 卻可以獲得大幅的進步。我測試的結果如下，可以看到無論是 incremental build 還是 clean build 都取得 50% 以上的進步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># w/o unity build v.s. with unity build (batch_size=8)</span></span><br><span class="line"><span class="comment"># using -j 6, w/o ccache, unit in seconds</span></span><br><span class="line">[<span class="built_in">touch</span> A.h]</span><br><span class="line">before = 242 <span class="comment"># 38 tasks</span></span><br><span class="line">after  = 167 <span class="comment"># 18 tasks</span></span><br><span class="line"></span><br><span class="line">[clean build]</span><br><span class="line">before = 420 <span class="comment"># 111 tasks</span></span><br><span class="line">after  = 224 <span class="comment">#  47 tasks</span></span><br></pre></td></tr></table></figure><h1 id="Better-linker"><a href="#Better-linker" class="headerlink" title="Better linker"></a>Better linker</h1><p>編譯的最後階段是 linking，這部分可以替換成比較厲害的 linker，市面上目前有三種較有名的 linker</p><ul><li>ld (gcc default)</li><li>gold</li><li>lld</li></ul><p>要替換使用 linker 只需要在 compile flag 加上<code>fuse-ld=&lt;linker_name&gt;</code>即可。詳細可參考 <a href="https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html">gcc document</a>。而我實測不同 linker 表現如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rebuild using single thread, unit in second</span></span><br><span class="line"><span class="comment"># [1/1] Linking CXX executable main</span></span><br><span class="line">[linker]</span><br><span class="line">ld   = 25.4</span><br><span class="line">gold = 11.6</span><br><span class="line">lld  =  5.8</span><br></pre></td></tr></table></figure><p>使用更強的 linker 雖然使 linking time 進步許多，但對整個專案的 compile time 而言其實佔比不是很大，相較於前面幾個章節算是進步較小的技巧。(但 CP 值也是很高，只要改一個 compile flag)</p><h1 id="Disable-var-tracking-for-huge-variable-object"><a href="#Disable-var-tracking-for-huge-variable-object" class="headerlink" title="Disable var-tracking for huge variable object"></a>Disable var-tracking for huge variable object</h1><p>我們可以透過 gcc flag <code>-ftime-report</code>來剖析編譯各個階段的耗時，然後針對各個耗時大的改善。</p><p>我測試的專案中，有一個 auto-generate 的<code>unordered_map</code>，該檔案動輒數萬行，每次編譯該檔案都會成為瓶頸。從<code>-ftime-report</code>得知編譯該檔案耗時最大的部分是 var-tracking，var-tracking 是讓 debug info 有更多資訊的功能，但當專案中有巨大的變數時，這會讓 compiling 速度大幅變慢。</p><p>在對我那個數萬行的<code>unordered_map</code>檔案拿掉 var-tracking 之後 (針對該檔案加上一個<code>-fno-var-tracking</code>flag) 結果如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gcc -ftime-report auto_gen.cpp</span></span><br><span class="line"><span class="comment"># with var-tracking v.s. without var-tracking, sorted by usr time</span></span><br><span class="line">[before]</span><br><span class="line">Time variable                                   usr           sys          wall               GGC</span><br><span class="line"> phase opt and generate             : 122.95 ( 92%)   2.30 ( 35%) 125.26 ( 89%)  924305 kB ( 46%)</span><br><span class="line"> var-tracking dataflow              :  71.39 ( 53%)   0.15 (  2%)  71.57 ( 51%)    3714 kB (  0%)</span><br><span class="line"> <span class="built_in">expand</span> vars                        :  17.55 ( 13%)   0.03 (  0%)  17.56 ( 12%)    8583 kB (  0%)</span><br><span class="line"> phase parsing                      :   8.09 (  6%)   3.46 ( 53%)  11.55 (  8%)  794986 kB ( 40%)</span><br><span class="line"> <span class="built_in">alias</span> stmt walking                 :   6.11 (  5%)   0.08 (  1%)   6.40 (  5%)     678 kB (  0%)</span><br><span class="line"> template instantiation             :   4.35 (  3%)   1.58 ( 24%)   6.03 (  4%)  443040 kB ( 22%)</span><br><span class="line"> phase lang. deferred               :   2.30 (  2%)   0.72 ( 11%)   3.02 (  2%)  232700 kB ( 12%)</span><br><span class="line"> var-tracking emit                  :   2.87 (  2%)   0.02 (  0%)   2.95 (  2%)   20420 kB (  1%)</span><br><span class="line"> |overload resolution               :   3.18 (  2%)   1.26 ( 19%)   4.50 (  3%)  330116 kB ( 16%)</span><br><span class="line"> TOTAL                              : 134.16          6.54        140.82        2005866 kB</span><br><span class="line"></span><br><span class="line">[after]</span><br><span class="line">Time variable                                   usr           sys          wall               GGC</span><br><span class="line"> phase opt and generate             :  44.61 ( 80%)   1.41 ( 27%)  46.03 ( 76%)  724840 kB ( 41%)</span><br><span class="line"> <span class="built_in">expand</span> vars                        :  18.45 ( 33%)   0.02 (  0%)  18.46 ( 30%)    8567 kB (  0%)</span><br><span class="line"> phase parsing                      :   8.32 ( 15%)   3.12 ( 59%)  11.45 ( 19%)  794986 kB ( 45%)</span><br><span class="line"> <span class="built_in">alias</span> stmt walking                 :   6.39 ( 12%)   0.11 (  2%)   6.52 ( 11%)     678 kB (  0%)</span><br><span class="line"> template instantiation             :   4.38 (  8%)   1.44 ( 27%)   5.93 ( 10%)  443040 kB ( 25%)</span><br><span class="line"> |overload resolution               :   3.27 (  6%)   0.97 ( 18%)   4.51 (  7%)  330116 kB ( 19%)</span><br><span class="line"> phase lang. deferred               :   2.27 (  4%)   0.70 ( 13%)   2.97 (  5%)  232700 kB ( 13%)</span><br><span class="line"> parser (global)                    :   1.89 (  3%)   0.90 ( 17%)   3.05 (  5%)  211250 kB ( 12%)</span><br><span class="line"> tree SSA incremental               :   1.58 (  3%)   0.01 (  0%)   1.55 (  3%)     259 kB (  0%)</span><br><span class="line"> TOTAL                              :  55.49          5.27         60.81        1761326 kB</span><br></pre></td></tr></table></figure><p>結果是從原本耗時 134 秒降低至耗時 55 秒，減少超過 50% 的時間。這也使得該檔案不會再是整個專案的瓶頸。</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>本文嘗試了許多技巧來加速編譯所需的時間，總結各點如下列：</p><ul><li>Use <code>ccache</code> <span style="color: green"><strong>[big improvement]</strong></span></li><li>Use forward declaration as more as possible <span style="color: green"><strong>[big improvement]</strong></span></li><li>Unity Build <span style="color: green"><strong>[big improvement]</strong></span></li><li>Use LLVM linker <span style="color: orange"><strong>[good improvement]</strong></span></li><li>Disable var-tracking for huge variable object <span style="color: orange"><strong>[good improvement]</strong></span></li><li>Pre-compiled headers [no improvement]</li><li>Explicit template instantiation [no improvement]</li></ul><p>在爬文時網友提及 pre-compiled headers 以及 explicit (extern) template 也對減少編譯時間有幫助，但實測並未有顯著差異，故本文未提及，也許實際上是有用只是剛好不適用於我的環境之類的。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://interrupt.memfault.com/blog/improving-compilation-times-c-cpp-projects">Improving Compilation Time of C&#x2F;C++ Projects</a></li><li><a href="https://stackoverflow.com/questions/2954473/variable-tracking-is-eating-my-compile-time">“variable tracking” is eating my compile time!</a></li><li><a href="https://cmake.org/cmake/help/latest/prop_tgt/UNITY_BUILD.html#prop_tgt:UNITY_BUILD">CMake Unity Build</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;編譯是靜態語言不可避免的步驟。對於開發者而言，編譯是個又愛又恨的東西，好處是他可以幫助在編譯時期找出部分的錯誤又可以幫忙最佳化，但是壞處則是編譯要時間，當專案越來越大時，小小改個檔案可能就要花數分鐘去等編譯。&lt;/p&gt;

    &lt;div&gt;
      &lt;img src=&quot;/img/2022-06-10/1.png&quot; alt=&quot;source: https://xkcd.com/303/&quot; data-action=&quot;zoom&quot; class=&quot;photozoom&quot;&gt;
      &lt;span class=&quot;zoom-initial-caption&quot;&gt;source: https://xkcd.com/303/&lt;/span&gt;
    &lt;/div&gt;</summary>
    
    
    
    
    <category term="c++" scheme="https://ssarcandy.tw/tags/c/"/>
    
    <category term="cmake" scheme="https://ssarcandy.tw/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>Share Storage Comparison</title>
    <link href="https://ssarcandy.tw/2021/05/10/share-storage-comparison/"/>
    <id>https://ssarcandy.tw/2021/05/10/share-storage-comparison/</id>
    <published>2021-05-10T07:36:52.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>Share storage，諸如家用 NAS 或工作站常有的網路硬碟(NFS)，是一個很方便又隨處可見的一種存儲空間，方便的點在於可以從不同機器存取或修改同樣的資料、避免需要維護重複的東西在不同的機器上；常見的使用情境像是會將 <code>/home</code> 家目錄放置於 Share storage 中，然後再掛載至所有工作站的機器上，這樣就可以讓使用者無論是登入哪一台工作站機器，都可以保持同樣的家目錄環境，十分方便。</p><span id="more"></span><link rel="stylesheet" href="https://unpkg.com/charts.css/dist/charts.min.css"><p>除了前言提到的使用情境以外，其實常見的使用方式也有像是拿來做為平行運算寫入的位置，或者用於存放大量資料集(dataset)給需要的人方便讀取(像是之前 CML 就是這樣用)。而諸如此類的應用其實就很考驗 Share storage 的讀寫性能，若性能不佳可能常常會壞掉，導致所有有掛載的機器都會陷入無法存取的窘境。</p><p>而本篇目的就是想要測測看市面上常見的 share storage 解決方案以及他們各自的寫入性能，做個大PK。底下列舉的就是我打算要測試的幾種 share storage (由於純讀取通常效能都很好，所以這邊只測寫入效能)</p><ul><li>Gluster file system v7 using SSD</li><li>Ceph file system v13.2 using SSD</li><li>Google Filestore (2T Premium Tier)</li><li>IBM File Storage (6T Type Endurance)</li><li>AWS EFS</li></ul><p>其中前兩個(Gluster, Ceph)需要自建，後三個(GCP, AWS, IBM)則是直接用雲端解決方案。</p><p>測試的方式我就用原始又有效的 <code>dd</code> 指令來試啦，基本上腳本長這樣：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">f=`hostname`</span><br><span class="line">rand=`<span class="built_in">head</span> /dev/urandom | <span class="built_in">tr</span> -dc A-Z | <span class="built_in">head</span> -c 5 ; <span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span>`</span><br><span class="line"><span class="built_in">sync</span> &amp;&amp; <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/mnt/testfile_<span class="variable">$&#123;f&#125;</span>_<span class="variable">$&#123;rand&#125;</span> bs=10M count=100 oflag=direct 2&gt;&amp;1 | <span class="built_in">cat</span></span><br></pre></td></tr></table></figure><p>這腳本有幾個參數可以調整：</p><ul><li><code>bs</code> - block size 指單一寫入區塊的大小</li><li><code>count</code> - 寫幾個區塊</li><li><code>of</code> - 寫到哪裡，<code>/mnt/</code> 就是我們要測試的 share storage 的目錄</li></ul><p>bs*count 就是總寫入大小，我這邊就統一使用 bs&#x3D;10MB, count&#x3D;100, 總計寫入 1GB。</p><p>而這個腳本執行的結果會像是這樣:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh</span><br><span class="line">100+0 records <span class="keyword">in</span></span><br><span class="line">100+0 records out</span><br><span class="line">1048576000 bytes (1.0 GB, 1000 MiB) copied, 4.59822 s, 128 MB/s </span><br><span class="line"><span class="comment">#                                                      ^^^^^^^^</span></span><br><span class="line"><span class="comment">#                                                      這就是寫入速度</span></span><br></pre></td></tr></table></figure><p>但這樣還不夠，要測試到極限的話，需要平行化同時執行一堆這個腳本，寫爆 share storage！</p><div id="mychart">  <ul class="charts-css legend legend-square">    <li>Gluster</li>    <li>Ceph</li>    <li>GCP</li>    <li>IBM</li>    <li>AWS</li>  </ul>  <table class="charts-css column multiple show-labels show-4-secondary-axes data-spacing-10 datasets-spacing-1">    <tbody>      <tr>        <th scope="row">100x10MB, 10 jobs</th>        <td style="--size: calc( 43.6 / 90 );"><span class="data">43</span></td>        <td style="--size: calc( 12.1 / 90 );"><span class="data">12</span></td>        <td style="--size: calc( 67.2 / 90 );"><span class="data">67</span></td>        <td style="--size: calc( 76.5 / 90 );"><span class="data">76</span></td>        <td style="--size: calc( 13.6 / 90 );"><span class="data">13</span></td>      </tr>      <tr>        <th scope="row">100x10MB, 20 jobs</th>        <td style="--size: calc( 12.0 / 90 );"><span class="data">12</span></td>        <td style="--size: calc( 6.2 / 90 );"><span class="data">6</span></td>        <td style="--size: calc( 29.3 / 90 );"><span class="data">29</span></td>        <td style="--size: calc( 66.1 / 90 );"><span class="data">66</span></td>        <td style="--size: calc( 6.1 / 90 );"><span class="data">6</span></td>      </tr>      <tr>        <th scope="row">100x10MB, 40 jobs</th>        <td style="--size: calc( 9.0 / 90 );"><span class="data"> 9 </span></td>        <td style="--size: calc( 6.0 / 90 );"><span class="data"> 6 </span></td>        <td style="--size: calc( 21.1 / 90 );"><span class="data">21</span></td>        <td style="--size: calc( 33.9 / 90 );"><span class="data">33</span></td>        <td style="--size: calc( 2.8 / 90 );"><span class="data"> 2 </span></td>      </tr>    </tbody>  </table></div><br><table><thead><tr><th></th><th>Gluster</th><th>Ceph</th><th>GCP</th><th>IBM</th><th>AWS</th></tr></thead><tbody><tr><td>100x10MB, 10 jobs</td><td>43.6</td><td>12.1</td><td>67.2</td><td>76.5</td><td>13.6</td></tr><tr><td>100x10MB, 20 jobs</td><td>12.0</td><td>6.2</td><td>29.3</td><td>66.1</td><td>6.1</td></tr><tr><td>100x10MB, 40 jobs</td><td>9.0</td><td>6.0</td><td>21.1</td><td>33.9</td><td>2.8</td></tr></tbody></table><p>▲ 不同 storage 寫入效能比較<sup>[1][2]</sup></p><p>結果如上圖所示，自建的系統其實表現都遜於雲端方案(尤其是同時平行寫入很多時)，這不排除是因為我安裝 Gluster &#x2F; Ceph 時基本上都是用預設的設定，沒有特別研究怎樣最佳化😱；而 AWS EFS 表現奇差，這有原因，底下詳述…。除此之外又穩又快的就是 GCP Filestore 以及 IBM File Storage 了，其中 IBM File Storage 在同時平行寫入很多時表現比較穩定，所以在這邊是 IBM 表現最佳🏆。</p><p><strong>AWS EFS</strong></p><p>AWS 的 EFS 的讀寫流量是有做限制的，基本上就是如果存越多資料在 EFS 裡面，則讀寫流量越高 (bursting mode)，這也造成基礎流量超低，如果用的儲存空間只有 100G，則讀寫流量大概落在 5 MB&#x2F;s，每增加 100GB 的空間用量會增加 5 MB&#x2F;s 的速度<sup>[3]</sup>，是個很妙的設計。在我這次的測試中，由於 EFS 基本上是空的，所以讀寫效能自然低下。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li>單位為 MB&#x2F;s</li><li>jobs 意指同時執行幾個寫入腳本，故若同時執行 10jobs，平均寫入可有 20MBps，則瞬時寫入速度為 200 MBps</li><li><a href="https://aws.amazon.com/efs/faq/?nc1=h_ls">AWS EFS - Scale and performance</a></li></ol><style>table {  font-size: 14px;}#mychart {  margin-bottom: 30px;}#mychart .data {  position: relative;  top: -20px;}#mychart tr {  height: 250px;  margin: 0 auto;}#mychart .legend {  flex-direction: row;  justify-content: space-between;  border: initial;}.charts-css.column.show-labels {  --labels-size: 3rem;}</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;Share storage，諸如家用 NAS 或工作站常有的網路硬碟(NFS)，是一個很方便又隨處可見的一種存儲空間，方便的點在於可以從不同機器存取或修改同樣的資料、避免需要維護重複的東西在不同的機器上；常見的使用情境像是會將 &lt;code&gt;/home&lt;/code&gt; 家目錄放置於 Share storage 中，然後再掛載至所有工作站的機器上，這樣就可以讓使用者無論是登入哪一台工作站機器，都可以保持同樣的家目錄環境，十分方便。&lt;/p&gt;</summary>
    
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
    <category term="cloud" scheme="https://ssarcandy.tw/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>Setup CouchDB Cluster using Docker Swarm</title>
    <link href="https://ssarcandy.tw/2021/01/25/setup-couchdb-using-docker-swarm/"/>
    <id>https://ssarcandy.tw/2021/01/25/setup-couchdb-using-docker-swarm/</id>
    <published>2021-01-25T19:36:10.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>CouchDB，一個主打安裝好之後就可以直接有原生 Http API 進行 CRUD (新增、讀取、修改、刪除) 的 NoSQL 資料庫，對於較簡單的應用程式甚至就直接免去後端的開發成本，直接對接 CouchDB Http API 介面即可。</p><p>除此之外，CouchDB 同時也主打所謂的 muti-master cluster 架構，可以輕易地設定多個 CouchDB instances 來達到 HA 的目的，確保服務不會因為伺服器掛掉而無法存取。</p><p>而本篇就是在記錄如何透過 Docker Swarm 來佈署跨機器的三個 CouchDB 並且將之設定為 cluster mode.</p>    <div>      <img src="/img/2021-01-26/1.png" alt="" data-action="zoom" class="photozoom">          </div><span id="more"></span><h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h1><p>在開始之前，由於我是打算要用 docker swarm 做跨機佈署，所以首先要先準備好環境：</p><ul><li>三台有不同 Public IP 的 Linux server</li><li>三台都裝好 docker</li><li>三台機器都設為 docker swarm mode</li></ul><p>如何將 docker 設定成 swarm mode 可以參考<a href="https://docs.docker.com/engine/swarm/">文件</a>，基本上就只要：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># init swarm</span></span><br><span class="line">$ docker swarm init</span><br><span class="line"></span><br><span class="line"><span class="comment"># add into existing swarm</span></span><br><span class="line">$ docker swarm <span class="built_in">join</span> --token &lt;token&gt;</span><br></pre></td></tr></table></figure><p>設定好之後可以用 <code>docker node ls</code> 確認一下，結果會類似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker node <span class="built_in">ls</span></span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">2v2lb55cyes0rf3tbtqe2zp9x *   docker-node-1       Ready               Active              Reachable           19.03.13</span><br><span class="line">2gedpa6dac3c80ilr3f9ji3fw     docker-node-2       Ready               Active              Leader              19.03.13</span><br><span class="line">7zj2xk3up7ce34atj2nme9rf9     docker-node-3       Ready               Active              Reachable           19.03.13</span><br></pre></td></tr></table></figure><h1 id="Setup-CouchDB-as-Single-Node"><a href="#Setup-CouchDB-as-Single-Node" class="headerlink" title="Setup CouchDB as Single Node"></a>Setup CouchDB as Single Node</h1><p>我們要使用的會是官方的 docker image — <code>couchdb:3.1.1</code></p><p>要使用其實不難，這邊可以示範一下在本機佈署 single node 的方式，<code>docker-compose.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">couchdb:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">COUCHDB_USER:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">      <span class="attr">COUCHDB_PASSWORD:</span> <span class="string">&quot;admin123&quot;</span></span><br><span class="line">      <span class="attr">COUCHDB_SECRET:</span> <span class="string">46d689495ca02e8c35c3a3f683000ef1</span></span><br><span class="line">      <span class="attr">NODENAME:</span> <span class="string">&quot;couchdb01&quot;</span></span><br><span class="line">      <span class="attr">ERL_FLAGS:</span> <span class="string">&quot;-setcookie a20b37d83ef18efce400b3ace400036e&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">couchdb:3.1.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5984:5984&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9100:9100&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4369:4369&quot;</span></span><br></pre></td></tr></table></figure><p>可以透過 docker compose 來嘗試執行這個檔案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d</span><br><span class="line">$ docker-compose ps</span><br><span class="line">Name                     Command               State                                   Ports                                 </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">couchdb_couchdb_1   tini -- /docker-entrypoint ...   Up      0.0.0.0:4369-&gt;4369/tcp, 0.0.0.0:5984-&gt;5984/tcp, 0.0.0.0:9100-&gt;9100/tcp</span><br></pre></td></tr></table></figure><p>然後就可以訪問 CouchDB 內建的管理介面: <code>http://&lt;IP&gt;:5984/_utils/</code>，接下來到 setup 頁面依照指示設定 single node，即可。</p>    <div>      <img src="/img/2021-01-26/2.png" alt="去 Verify 介面測試是否完成安裝。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">去 Verify 介面測試是否完成安裝。</span>    </div><p>至此就完成 Single Node CouchDB 的安裝，可喜可賀。</p><h1 id="Deploy-as-CouchDB-Cluster-Mode"><a href="#Deploy-as-CouchDB-Cluster-Mode" class="headerlink" title="Deploy as CouchDB Cluster Mode"></a>Deploy as CouchDB Cluster Mode</h1><p>剛剛嘗試了一鍵佈署 single node 的 CouchDB，那接下來就來嘗試主角吧 — Cluster Mode </p><p>CouchDB 的 cluster mode 設定比起 single node 來的複雜非常多，而且存在許多坑 (都不會有 error log 的坑)，我這邊就是紀錄我摸索無數夜晚得出的結果😵</p><p>首先我先列出要設定 cluster mode 必須要滿足的條件：</p><ul><li>每個 CouchDB 必須要有一樣的 admin &amp; password &amp; secret &amp; erl cookie，這對應到 docker image 的 <code>COUCHDB_USER</code>, <code>COUCHDB_PASSWORD</code>, <code>COUCHDB_SECRET</code>, <code>ERL_FLAGS</code></li><li>每個 CouchDB 必須要可以透過 <code>NODENAME</code> 來互相溝通</li><li>每個 CouchDB 必須要有同樣的 uuid</li></ul><h2 id="Prepare-config-ini"><a href="#Prepare-config-ini" class="headerlink" title="Prepare config.ini"></a>Prepare config.ini</h2><p>為了要保證大家的 Config 一致，這邊我要用事先準備好的 <code>config.ini</code>，而非透過 yml 的 environment 傳參數，這個方法也是<a href="https://github.com/apache/couchdb-docker#configuring-couchdb">官方建議的方法</a><sup>[1]</sup>:</p><blockquote><p>The best way to provide configuration to the <code>%%REPO%%</code> image is to provide a custom ini file to CouchDB, preferably stored in the <code>/opt/couchdb/etc/local.d/</code> directory. There are many ways to provide this file to the container (via short Dockerfile with FROM + COPY, via Docker Configs, via runtime bind-mount, etc), the details of which are left as an exercise for the reader.</p></blockquote><p>那接下來就來準備 <code>config.ini</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[admins]</span><br><span class="line">admin = -pbkdf2-07fe7c8d94281cafdfa065c0f9dd9b6fae56b649,8a3bfe04b1f4294d89d9e9d250fce77a,10</span><br><span class="line"></span><br><span class="line">[couch_httpd_auth]</span><br><span class="line">secret = 46d689495ca02e8c35c3a3f683000ef1</span><br><span class="line"></span><br><span class="line">[couchdb]</span><br><span class="line">uuid = 7ff6dd245116a7288b798b003f00099e</span><br></pre></td></tr></table></figure><p>這邊就有一個坑，就是 admin 的 password 必須要是 hash 版本的，如果這邊是 plain text 的話，在啟動時 CouchDB 會自動做 hash，然後就會導致三台 CouchDB 的 password 不一致 (同樣的密碼 hash 的結果會不一樣，相關文章：  <a href="/2020/01/29/timing-attack/" title="Timing Attack in String Compare">Timing Attack in String Compare</a> )；密碼不一致就會出現 <code>unable to sync admin passwords</code> 錯誤。</p><p>那關於要如何獲取 hash 過的密碼，官方是推薦透過建立一個 dummy 的 single node，然後去看他 hash 出來的密碼長怎樣，再 copy 過來 (好蠢…)</p><p>這邊提供另一個方法，如<a href="https://blog.sleeplessbeastie.eu/2020/03/13/how-to-generate-password-hash-for-couchdb-administrator/">這篇文章</a><sup>[2]</sup>所說，可以透過 python script 產生 hashed password：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ PASS=<span class="string">&quot;admin123&quot;</span> SALT=<span class="string">&quot;8a3bfe04b1f4294d89d9e9d250fce77a&quot;</span> ITER=10 \</span><br><span class="line">  python3 -c <span class="string">&quot;import os,hashlib; print(&#x27;-pbkdf2-%s,%s,%s&#x27; % (hashlib.pbkdf2_hmac(&#x27;sha1&#x27;,os.environ[&#x27;PASS&#x27;].encode(),os.environ[&#x27;SALT&#x27;].encode(),int(os.environ[&#x27;ITER&#x27;].encode())).hex(), os.environ[&#x27;SALT&#x27;], os.environ[&#x27;ITER&#x27;]))&quot;</span></span><br><span class="line">-pbkdf2-07fe7c8d94281cafdfa065c0f9dd9b6fae56b649,8a3bfe04b1f4294d89d9e9d250fce77a,10</span><br></pre></td></tr></table></figure><h2 id="Using-same-config-across-nodes"><a href="#Using-same-config-across-nodes" class="headerlink" title="Using same config across nodes"></a>Using same config across nodes</h2><p>官方說了三種方式提供 ini 檔：</p><ul><li>via Dockerfile COPY — 這太蠢了，每次改 config 都要重新 build</li><li>via Docker Config — ok 👍</li><li>via runtime mount — 在 docker swarm 比較不適合，因為不是所有 node 都能夠 mount</li></ul><p>所以其實只剩下 <a href="https://docs.docker.com/engine/swarm/configs/">Docker Config</a> 較適當。</p><p>docker config 設定方式如下，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">couchdb:</span></span><br><span class="line">    <span class="comment"># ...skip</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">couchdb_conf</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/opt/couchdb/etc/local.d/config.ini</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">couchdb_conf:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./config.ini</span></span><br></pre></td></tr></table></figure><p>我們將事先準備好的 <code>config.ini</code> 透過 docker config 掛載至所有 CouchDB 的 <code>local.d</code> 資料夾。</p><p>這裡有另一個坑，有可能會出現 CrashLoopBackOff 的狀況，我嘗試發現根本沒辦法掛載到 <code>/opt/couchdb/</code> 底下的任何目錄，大概是 bug 吧，這邊有相關 <a href="https://github.com/apache/couchdb-docker/issues/73">GitHub issue</a><sup>[3]</sup>。</p><p>為了繞過這個不能 mount 的問題，必須要覆寫 entrypoint，先把 config file copy 到適當的位置再執行原本的 entrypoint，所以會改成這樣：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">couchdb:</span></span><br><span class="line">    <span class="comment"># ...skip</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">&quot;cp -f /couchdb_conf /opt/couchdb/etc/local.d/couch.ini &amp;&amp; tini -- /docker-entrypoint.sh /opt/couchdb/bin/couchdb&quot;</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">couchdb_conf</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">couchdb_conf:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./config.ini</span></span><br></pre></td></tr></table></figure><p>這樣改意思是先把 config 掛載至別的地方，然後在執行 entrypoint 時先 copy 至正確位置之後再執行原本的指令。</p><h3 id="Join-All-CouchDB-Instances-as-a-Cluster"><a href="#Join-All-CouchDB-Instances-as-a-Cluster" class="headerlink" title="Join All CouchDB Instances as a Cluster"></a>Join All CouchDB Instances as a Cluster</h3><p>至此我們已經可以撰寫出完整的 <code>docker-swarm.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">couchdb:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">NODENAME:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;.Service.Name&#125;&#125;</span>.<span class="template-variable">&#123;&#123;.Task.Slot&#125;&#125;</span>.<span class="template-variable">&#123;&#123;.Task.ID&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">ERL_FLAGS:</span> <span class="string">&quot;-setcookie a20b37d83ef18efce400b3ace400036e&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">couchdb:3.1.1</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">network:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">couchdb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5984:5984&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9100:9100&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4369:4369&quot;</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">&quot;cp -f /couchdb_conf /opt/couchdb/etc/local.d/couch.ini &amp;&amp; tini -- /docker-entrypoint.sh /opt/couchdb/bin/couchdb&quot;</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">couchdb_conf</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/opt/couchdb/etc/local.d/config.ini</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">network:</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">couchdb_conf:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./couchdb-conf.ini</span></span><br></pre></td></tr></table></figure><p>這邊我用 <code>global mode</code> 是因為我希望每一台機器恰好只有一個 CouchDB。(上面的 yml 我也沒有掛 volume 所以資料會在 container 不見時一起消失)。</p><p><code>NODENAME: "{{.Service.Name}}.{{.Task.Slot}}.{{.Task.ID}}"</code> 則是因為透過 docker swarm 佈署時，他的命名規則就是長這樣，在 docker 裡面是可以透過這個 nodename ping 到別台的。要查詢 docker container name 的話只要 <code>docker ps</code> 就可以看到。</p><p>接下來就直接佈署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack deploy -c docker-swarm.yaml <span class="built_in">test</span></span><br><span class="line">$ docker stack ps <span class="built_in">test</span>                     </span><br><span class="line">ID                  NAME                                     IMAGE               NODE                DESIRED STATE       CURRENT STATE          </span><br><span class="line">ynacuaj8tx35        test_couchdb.7zj2xk3up7ce34atj2nme9rf9   couchdb:3.1.1       docker-node-3       Running             Running 25 seconds ago</span><br><span class="line">5p5w38jtjh7z        test_couchdb.2v2lb55cyes0rf3tbtqe2zp9x   couchdb:3.1.1       docker-node-1       Running             Running 25 seconds ago</span><br><span class="line">bekjdetq739z        test_couchdb.2gedpa6dac3c80ilr3f9ji3fw   couchdb:3.1.1       docker-node-2       Running             Running 26 seconds ago</span><br></pre></td></tr></table></figure><p>每個 node 都起來之後就可以去做最後的設定，CouchDB 設定 Cluster 的方式是透過 admin http api 去把其他 CouchDB 加進某台。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT <span class="string">&quot;http://admin:admin123@&lt;IP&gt;:5984/_node/_local/_nodes/couchdb@test_couchdb.2v2lb55cyes0rf3tbtqe2zp9x.strqjl8lsdm58tozn59mp8du7&quot;</span> -d &#123;&#125;</span><br><span class="line">&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;couchdb@test_couchdb.2v2lb55cyes0rf3tbtqe2zp9x.strqjl8lsdm58tozn59mp8du7&quot;</span>,<span class="string">&quot;rev&quot;</span>:<span class="string">&quot;1-967a00dff5e02add41819138abb3284d&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">$ curl -X PUT <span class="string">&quot;http://admin:admin123@&lt;IP&gt;:5984/_node/_local/_nodes/couchdb@test_couchdb.7zj2xk3up7ce34atj2nme9rf9.u5ce5bl7cmjlhkb2781cye7py&quot;</span> -d &#123;&#125;</span><br><span class="line">&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;couchdb@test_couchdb.7zj2xk3up7ce34atj2nme9rf9.u5ce5bl7cmjlhkb2781cye7py&quot;</span>,<span class="string">&quot;rev&quot;</span>:<span class="string">&quot;1-967a00dff5e02add41819138abb3284d&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">$ curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span>  <span class="string">&quot;http://admin:admin123@&lt;IP&gt;:5984/_cluster_setup&quot;</span> -d <span class="string">&#x27;&#123;&quot;action&quot;: &quot;finish_cluster&quot;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>都加好之後，可以透過 <code>/_membership</code> 檢查是否正確：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;http://admin:admin123@&lt;IP&gt;:5984/_membership&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;all_nodes&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;couchdb@test_couchdb.2gedpa6dac3c80ilr3f9ji3fw.irqxr1k8e9v8xekae1xtuxxab&quot;</span>,</span><br><span class="line">    <span class="string">&quot;couchdb@test_couchdb.2v2lb55cyes0rf3tbtqe2zp9x.strqjl8lsdm58tozn59mp8du7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;couchdb@test_couchdb.7zj2xk3up7ce34atj2nme9rf9.u5ce5bl7cmjlhkb2781cye7py&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;cluster_nodes&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;couchdb@test_couchdb.2gedpa6dac3c80ilr3f9ji3fw.irqxr1k8e9v8xekae1xtuxxab&quot;</span>,</span><br><span class="line">    <span class="string">&quot;couchdb@test_couchdb.2v2lb55cyes0rf3tbtqe2zp9x.strqjl8lsdm58tozn59mp8du7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;couchdb@test_couchdb.7zj2xk3up7ce34atj2nme9rf9.u5ce5bl7cmjlhkb2781cye7py&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就設定完成啦🎉 (記得再去管理介面 verifyinstall 檢查一次)</p><h1 id="Test-High-Availability"><a href="#Test-High-Availability" class="headerlink" title="Test High Availability"></a>Test High Availability</h1><p>設定好 cluster 之後就要來驗證 HA 是否正常，這邊測試的方法會是先在某台 CouchDB 新增資料，理論上其他台也會可以存取這筆資料：</p><p>先建立一個新 database 以及一個新 document：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT <span class="string">&quot;http://admin:admin123@&lt;server01&gt;:5984/mydatabase&quot;</span>  </span><br><span class="line">&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line">$ curl -X PUT <span class="string">&quot;http://admin:admin123@&lt;server01&gt;:5984/mydatabase/01&quot;</span> -d <span class="string">&#x27;&#123;&quot;key&quot;: &quot;val&quot;&#125;&#x27;</span>        </span><br><span class="line">&#123;<span class="string">&quot;ok&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;01&quot;</span>,<span class="string">&quot;rev&quot;</span>:<span class="string">&quot;1-00e36163fac5c61bb681fef0c52528e2&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>接下來這個 document 會自動 replicated 到其他兩台 CouchDB，可以透過分別 curl 每一台來驗證是否有一樣的 document：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;http://admin:admin123@&lt;server01&gt;:5984/mydatabase/01&quot;</span>                    </span><br><span class="line">&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;01&quot;</span>,<span class="string">&quot;_rev&quot;</span>:<span class="string">&quot;1-00e36163fac5c61bb681fef0c52528e2&quot;</span>,<span class="string">&quot;key&quot;</span>:<span class="string">&quot;val&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">&quot;http://admin:admin123@&lt;server02&gt;:5984/mydatabase/01&quot;</span></span><br><span class="line">&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;01&quot;</span>,<span class="string">&quot;_rev&quot;</span>:<span class="string">&quot;1-00e36163fac5c61bb681fef0c52528e2&quot;</span>,<span class="string">&quot;key&quot;</span>:<span class="string">&quot;val&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">&quot;http://admin:admin123@&lt;server03&gt;:5984/mydatabase/01&quot;</span></span><br><span class="line">&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;01&quot;</span>,<span class="string">&quot;_rev&quot;</span>:<span class="string">&quot;1-00e36163fac5c61bb681fef0c52528e2&quot;</span>,<span class="string">&quot;key&quot;</span>:<span class="string">&quot;val&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>這樣即使任意機器掛掉，整個系統都還是可以維持運作。</p><p>(實務上再去疊一層 Load Balancer 讓 Http endpoint 統一會更方便)</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>設定 single node 很簡單，但設定 cluster mode 頗複雜，我個人覺得 error log 沒有非常完整，很多各式各樣的坑都會直接死掉根本不會有任何 log，很崩潰…😱。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://github.com/apache/couchdb-docker#configuring-couchdb">Configuring CouchDB</a></li><li><a href="https://blog.sleeplessbeastie.eu/2020/03/13/how-to-generate-password-hash-for-couchdb-administrator/">How to generate password hash for CouchDB administrator</a></li><li><a href="https://github.com/apache/couchdb-docker/issues/73#issuecomment-766179802">Configuration from docker config or secret? #73</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;CouchDB，一個主打安裝好之後就可以直接有原生 Http API 進行 CRUD (新增、讀取、修改、刪除) 的 NoSQL 資料庫，對於較簡單的應用程式甚至就直接免去後端的開發成本，直接對接 CouchDB Http API 介面即可。&lt;/p&gt;
&lt;p&gt;除此之外，CouchDB 同時也主打所謂的 muti-master cluster 架構，可以輕易地設定多個 CouchDB instances 來達到 HA 的目的，確保服務不會因為伺服器掛掉而無法存取。&lt;/p&gt;
&lt;p&gt;而本篇就是在記錄如何透過 Docker Swarm 來佈署跨機器的三個 CouchDB 並且將之設定為 cluster mode.&lt;/p&gt;

    &lt;div&gt;
      &lt;img src=&quot;/img/2021-01-26/1.png&quot; alt=&quot;&quot; data-action=&quot;zoom&quot; class=&quot;photozoom&quot;&gt;
      
    &lt;/div&gt;</summary>
    
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
    <category term="docker" scheme="https://ssarcandy.tw/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>用手機拍攝日食到底可不可行</title>
    <link href="https://ssarcandy.tw/2020/06/28/Photographing-Solar-Eclipse-with-only-a-Smartphone/"/>
    <id>https://ssarcandy.tw/2020/06/28/Photographing-Solar-Eclipse-with-only-a-Smartphone/</id>
    <published>2020-06-28T10:01:05.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>這次六月二十一日台灣正好有機會觀測到難得一見的日環食，我當然也是必不缺席，直接跑去嘉義的香湖公園餐與這次盛會。雖然我一直在腦中規劃這次該如何觀測，但實際要採購時還是太晚根本買不到巴德膜，最後只買到十個日食觀測眼鏡….慘…</p><p>而這麼小的日食觀測眼鏡也不太容易直接套在單眼相機鏡頭前，所以我最後就索性決定這次只使用我的手機拍攝，順便來實測看看用手機拍攝日食到底可不可行？</p>    <div>      <img src="/img/2020-06-28/01.png" alt="日環食時間序列，下排左一算是有拍到貝里珠。器材：Google Pixel 4 + 太陽濾鏡" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">日環食時間序列，下排左一算是有拍到貝里珠。器材：Google Pixel 4 + 太陽濾鏡</span>    </div><span id="more"></span><p>一直以來天文攝影都是件昂貴的興趣，我個人其實除了以前在天文社能夠接觸到厲害的器材之外，畢業之後其實自己也沒有自行購買單眼或望遠鏡的裝備，簡單來說我器材都是蹭飯借來的…🤣</p><p>手機鏡頭跟單眼鏡頭其實最大的差別就是鏡頭大小，這直接影響了天體的進光亮，當然也直接影響訊躁比，這個差別在一般的天體攝影或星野攝影都是手機鏡頭巨大的弱勢，但日食則是例外，我們永遠不會擔心拍攝太陽的進光亮不足，只擔心進光亮太足燒了我的鏡頭🔥。</p><p>雖然手機鏡頭小對拍攝日食影響不大，但要用手機拍攝太陽還是必須解決許多問題，比如說：</p><ul><li>減光。鏡頭雖小，太陽還是有可能燒壞手機鏡頭。</li><li>手動控制拍照參數。手機軟體不見得會提供對手動對焦功能。</li><li>長焦攝影。一般手機拍攝視角都偏廣，如何拍攝清楚的太陽是也是一個問題。</li></ul><p>關於這幾個問題，我就分享我自己的做法：</p><h2 id="減光"><a href="#減光" class="headerlink" title="減光"></a>減光</h2><p>太陽是個世界亮的東西，不減光肯定什麼鬼都拍不到。最簡單的減光方式就是把路上會發的日食觀測眼鏡剪下來貼在手機鏡頭前面，就可以了~🎉<br>我是貼在手機殼上面，這樣也方便拆卸。</p><div style="display: flex; align-items: center;">    <div>      <img src="/img/2020-06-28/02.png" alt="做工很醜的減光片。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">做工很醜的減光片。</span>    </div>    <div>      <img src="/img/2020-06-28/03.png" alt="減光前。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">減光前。</span>    </div>    <div>      <img src="/img/2020-06-28/04.png" alt="減光後，太陽超小。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">減光後，太陽超小。</span>    </div></div><h2 id="手動控制拍照參數"><a href="#手動控制拍照參數" class="headerlink" title="手動控制拍照參數"></a>手動控制拍照參數</h2><p>手機相機軟體通常都沒有提供手動控制快門時間、對焦、ISO 或其他參數，這部分也是我無法解決的部分，我的相機是不提供手動對焦的，所以我只能想辦法放大一點，然後跟智障一樣一直狂按太陽祈禱他會心血來潮對到焦…。我大概拍攝了 400 來張，真的夠清晰的不到 100 張，慘慘慘。</p><p>另外假設手機有支援儲存 RAW 檔的話一定要存 RAW 檔！RAW 檔可以保留照片更多資訊及細節，在後面要做影像的細部調整或拉曲線等等都較不易失真。</p><h2 id="長焦攝影"><a href="#長焦攝影" class="headerlink" title="長焦攝影"></a>長焦攝影</h2><p>太陽其實只有半度的視角，不放大根本只占照片中小小一顆的，如上圖右一。要透過手機提高有效焦長，一是可以購買額外手機望遠配件 (感覺配件店不少類似的，但品質未知。)；二是目前不少手機有長焦鏡可以做到光學或數位變焦 (像是 iPhone 可以 2x 光學變焦) 也是可以湊合著用。而我是直接用 Pixel 4 數位變焦到八倍，順便測測他宣稱的 <a href="https://ai.googleblog.com/2018/10/see-better-and-further-with-super-res.html">super res zoom</a> 效果。</p>    <div>      <img src="/img/2020-06-28/05.png" alt="放大後效果還不錯，而且也比較好對焦。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">放大後效果還不錯，而且也比較好對焦。</span>    </div><h2 id="其他突發狀況"><a href="#其他突發狀況" class="headerlink" title="其他突發狀況"></a>其他突發狀況</h2><p>剛剛上面提到的幾點都是可以預想到並且先預練過，但真的上場時還是遇到其他突發狀況，像是我開拍不到半小時手機就直接熱到當機，然後直接關機掰掰….。只好趕緊在旁對手機搧風吹氣待它降溫再強行開機，旁邊的人一定覺得我是怪人😂</p><p>熱到當機這狀況直到食分夠大時，氣溫明顯下降後就改善許多哈哈。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>就我這次的拍攝結果來說，我覺得其實目前的手機很多應該有辦法拍攝到跟本篇同等程度的照片，雖然離單眼或真正專業的器材所拍出來的還是有差距，但對於一日天文迷或沒錢的天文迷，其實用自己的手機也是有辦法記錄下這些特殊天象的。我個人覺得最難克服的會是手動對焦及熱到當機的問題，這兩者能解決就可以很輕鬆的拍攝了。</p><p>日食結束後上 PTT 發現有這篇文 <a href="https://www.ptt.cc/bbs/Gossiping/M.1592727472.A.C94.html">[問卦] 手機拍太陽！？！？</a> ，本文應該算能夠解答這問卦~</p><p>日環食跟偏食完全是不同的體驗，在食既到復圓之間，周遭氣溫、環境光變化十分明顯，感覺就像是突然變黃昏那樣暗但天空卻沒有黃昏的橘色，很難形容的光線；溫度也突然變涼爽。且湖面上閃耀著暗暗的光(?)，整個世界都感覺很不自然。🤯</p><p>環食那刻全場歡呼，我也親眼見證了那神奇的一刻，絕對比我之前看過的任何天象都神奇，不枉費我曬的 6 小時的太陽。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;這次六月二十一日台灣正好有機會觀測到難得一見的日環食，我當然也是必不缺席，直接跑去嘉義的香湖公園餐與這次盛會。雖然我一直在腦中規劃這次該如何觀測，但實際要採購時還是太晚根本買不到巴德膜，最後只買到十個日食觀測眼鏡….慘…&lt;/p&gt;
&lt;p&gt;而這麼小的日食觀測眼鏡也不太容易直接套在單眼相機鏡頭前，所以我最後就索性決定這次只使用我的手機拍攝，順便來實測看看用手機拍攝日食到底可不可行？&lt;/p&gt;

    &lt;div&gt;
      &lt;img src=&quot;/img/2020-06-28/01.png&quot; alt=&quot;日環食時間序列，下排左一算是有拍到貝里珠。器材：Google Pixel 4 + 太陽濾鏡&quot; data-action=&quot;zoom&quot; class=&quot;photozoom&quot;&gt;
      &lt;span class=&quot;zoom-initial-caption&quot;&gt;日環食時間序列，下排左一算是有拍到貝里珠。器材：Google Pixel 4 + 太陽濾鏡&lt;/span&gt;
    &lt;/div&gt;</summary>
    
    
    
    
    <category term="trashtalk" scheme="https://ssarcandy.tw/tags/trashtalk/"/>
    
  </entry>
  
  <entry>
    <title>Build a High Performance Computing Cluster on GCP</title>
    <link href="https://ssarcandy.tw/2020/04/21/Build-a-High-Performance-Computing-Cluster-on-GCP/"/>
    <id>https://ssarcandy.tw/2020/04/21/Build-a-High-Performance-Computing-Cluster-on-GCP/</id>
    <published>2020-04-21T19:26:24.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>敝司長久以來都是自建 Cluster 來做為日常運算資源使用的，長時間一直都被擴充性、I&#x2F;O 效能所卡住，若是卡在運算資源不夠光是採買新機器動輒要幾個月；被 share storage 的 I&#x2F;O 效能卡住更慘，整個系統會慢到爆 job 都卡住…<br>所以我就在想有沒有辦法在雲上建立這種高效能運算叢集，想動態擴張幾台就幾台，再加上我相信無論是 AWS, GCP 等等大平台所提供的 NFS 服務應該都差不到哪裡去吧…? </p><span id="more"></span><p>本文旨在在 Google Cloud Platform 上建立由 Slurm<sup>[1]</sup> 管理的運算叢集，並且也建立一個 NFS 自動掛載在所有 compute nodes 上面供大家讀取及寫入。</p><p>在開始之前要先釐清這個 cluster 需要的東西，基本上是下列：</p><ul><li>A client VM</li><li>Slurm controller</li><li>N nodes of Slurm computing node</li><li>NFS that mount on all computing nodes</li></ul><p>整體圖大概長這樣，基本上參考 google 的架構<sup>[2]</sup>，只是加上一個 NFS</p>    <div>      <img src="/img/2020-04-22/2.png" alt="架構圖。Client VM 也需要掛載 NFS" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">架構圖。Client VM 也需要掛載 NFS</span>    </div><h1 id="Create-a-Share-Storage"><a href="#Create-a-Share-Storage" class="headerlink" title="Create a Share Storage"></a>Create a Share Storage</h1><p>首先先來建立一個儲存空間來當作 NFS ，用於掛載在所有 Nodes 上，這樣才可以在任何地方存取同樣的資料，我這邊選用 Google Filestore 因為他的 I&#x2F;O 會比一般 Google 的 pd-standard 或 pd-ssd 來的好<sup>[3]</sup></p><p>建立這個就不太需要介紹了，就跑去 GCP console 案案案就好了，其中一個要注意的是 authorized VPC network 如果沒特別需要，可以選 default 會比較簡單。</p>    <div>      <img src="/img/2020-04-22/1.png" alt="案案案就會得到這個" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">案案案就會得到這個</span>    </div><h1 id="Setup-Slurm-Cluster"><a href="#Setup-Slurm-Cluster" class="headerlink" title="Setup Slurm Cluster"></a>Setup Slurm Cluster</h1><p>接下來要來佈屬 Slurm controller, compute nodes, client VM 到 GCP 上，這邊其實已經有整個模板了，<a href="https://github.com/SchedMD/slurm-gcp">github 連結</a>。<br>這個可以直接用 <code>gcloud</code> 佈署，但在此之前需要先改改 config ，主要要改的是 <code>slurm-cluster.yaml</code></p><ul><li>cluster_name: 愛取啥取啥</li><li>zone: 既然在台灣就選 <code>asia-east1-b</code></li><li>vpc_net: 這要填 <code>default</code>，不填的話會自動建立 <code>&#123;cluster_name&#125;-network</code> 的 VPC</li><li>vpc_subnet: 填 default 吧</li><li>controller_machine_type: 如果 compute node 打算超過 100 台的話可以選好一點</li><li>network_storage: 這邊要掛載剛剛建立的 nfs</li></ul><p>其他就參考以下吧</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">imports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">path:</span> <span class="string">slurm.jinja</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">slurm-cluster</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">slurm.jinja</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">cluster_name:</span> <span class="string">cloud-slurm</span></span><br><span class="line">    <span class="attr">zone:</span> <span class="string">asia-east1-b</span></span><br><span class="line">    <span class="attr">vpc_net:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">vpc_subnet:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">controller_machine_type:</span> <span class="string">n1-standard-8</span></span><br><span class="line">    <span class="attr">controller_disk_type:</span> <span class="string">pd-standard</span></span><br><span class="line">    <span class="attr">controller_disk_size_gb:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">login_machine_type:</span> <span class="string">n1-standard-2</span></span><br><span class="line">    <span class="attr">network_storage:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">server_ip:</span> <span class="string">&lt;filestore</span> <span class="string">ip&gt;</span></span><br><span class="line">        <span class="attr">remote_mount:</span> <span class="string">/slurm_nfs</span></span><br><span class="line">        <span class="attr">local_mount:</span> <span class="string">/j</span></span><br><span class="line">        <span class="attr">fs_type:</span> <span class="string">nfs</span></span><br><span class="line">    <span class="attr">compute_image_machine_type:</span> <span class="string">n1-standard-2</span></span><br><span class="line">    <span class="attr">ompi_version:</span> <span class="string">v3.1.x</span></span><br><span class="line">    <span class="attr">partitions:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fast</span></span><br><span class="line">        <span class="attr">machine_type:</span> <span class="string">n1-standard-2</span></span><br><span class="line">        <span class="attr">max_node_count:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">zone:</span> <span class="string">asia-east1-b</span></span><br><span class="line">        <span class="attr">vpc_subnet:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><p>另外一個要改的是 <code>scripts/startup.sh</code> ，這個 script 是 VM 啟動會執行的，由於我們用到 NFS 所以要安裝 nfs package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scripts/startup.sh</span></span><br><span class="line">  </span><br><span class="line">PACKAGES=(</span><br><span class="line">        <span class="string">&#x27;bind-utils&#x27;</span></span><br><span class="line">        <span class="comment"># ... skip</span></span><br><span class="line">        <span class="string">&#x27;yum-utils&#x27;</span></span><br><span class="line">        <span class="string">&#x27;nfs-utils&#x27;</span> <span class="comment"># we need this one for mount nfs</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>我個人認為最大的雷就是 filestore 跟 slurm cluster 必須在同一個 VPC 才能掛載，然後這個 slurm template 不指定 vpc 他會幫你建一個 (不是用 default)，所以我一開始搞一直不同 vpc 掛不起來…</p><h1 id="Deploy-amp-Test-It"><a href="#Deploy-amp-Test-It" class="headerlink" title="Deploy &amp; Test It"></a>Deploy &amp; Test It</h1><p>設定通通解決後接下來就是佈署上 GCP 了，基本上透過 gcloud 就可以了:<br>這邊可以 clone 我改過的設定檔 (跟上面說的設定一樣)，記得要填 nfs IP</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/SSARCandy/slurm-gcp.git</span><br><span class="line">$ <span class="built_in">cd</span> slurm-gcp</span><br><span class="line">$ gcloud deployment-manager deployments create gcp-slurm --config slurm-cluster.yaml</span><br><span class="line">Waiting <span class="keyword">for</span> create [operation-5a3cd5941e0b1-f13e780b-ba00af15]...<span class="keyword">done</span>.</span><br><span class="line">Create operation operation-5a3cd5941e0b1-f13e780b-ba00af15 completed successfully.</span><br><span class="line">NAME                           TYPE                 STATE      ERRORS  INTENT</span><br><span class="line">cloud-slurm-asia-east1-router  compute.v1.router    COMPLETED  []</span><br><span class="line">cloud-slurm-compute-0-image    compute.v1.instance  COMPLETED  []</span><br><span class="line">cloud-slurm-controller         compute.v1.instance  COMPLETED  []</span><br><span class="line">cloud-slurm-login0             compute.v1.instance  COMPLETED  []</span><br></pre></td></tr></table></figure><p>接下來要等一下大概五分鐘，因為要建立一個 compute node 的 image，之後要自動擴展 compute node 時使用。</p>    <div>      <img src="/img/2020-04-22/3.png" alt="完成後可以在 console 上看到" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">完成後可以在 console 上看到</span>    </div><p>待一切就序之後就可以登入試試，可以看到 <code>slurm_nfs</code> 也有掛載在上面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud compute ssh cloud-slurm-login0 --zone=asia-east1-b</span><br><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem                         Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                           3.6G     0  3.6G   0% /dev</span><br><span class="line">tmpfs                              3.6G     0  3.6G   0% /dev/shm</span><br><span class="line">tmpfs                              3.6G  8.5M  3.6G   1% /run</span><br><span class="line">tmpfs                              3.6G     0  3.6G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda2                           20G  2.8G   18G  15% /</span><br><span class="line">/dev/sda1                          200M   12M  189M   6% /boot/efi</span><br><span class="line">cloud-slurm-controller:/home        20G  4.4G   16G  22% /home</span><br><span class="line">cloud-slurm-controller:/apps        20G  4.4G   16G  22% /apps</span><br><span class="line">cloud-slurm-controller:/etc/munge   20G  4.4G   16G  22% /etc/munge</span><br><span class="line">10.173.83.218:/slurm_nfs           2.5T  9.9G  2.4T   1% /j</span><br><span class="line">tmpfs                              732M     0  732M   0% /run/user/1993390025</span><br></pre></td></tr></table></figure><p>利用 <code>sinfo</code> 可以查看 slurm cluster status，有一百台等著被使用。這一百台都是假的，要等到有人真的發 job 才會建立，然後閒置太久就會被關掉，是個很省錢的方式呢～</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sinfo </span><br><span class="line">PARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST</span><br><span class="line">fast*        up   infinite    100  idle~ cloud-slurm-compute-0-[0-99]</span><br></pre></td></tr></table></figure>    <div>      <img src="/img/2020-04-22/4.png" alt="發送 jobs 時才會動態建立 computing nodes，閒置過久會刪掉" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">發送 jobs 時才會動態建立 computing nodes，閒置過久會刪掉</span>    </div><p>試試看發很多個會寫檔到 NFS 的 job，先建立個 <code>slurm_filewriter.sh</code>，這個檔案會執行寫入 1GB 的資料到 NFS 裡。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#SBATCH --job-name=io-performannce</span></span><br><span class="line"><span class="comment">#SBATCH --output=out_%j</span></span><br><span class="line"><span class="comment">#SBATCH --ntasks=1</span></span><br><span class="line"><span class="comment">#SBATCH --ntasks-per-node=1</span></span><br><span class="line"><span class="comment">#SBATCH --cpus-per-task=1</span></span><br><span class="line">f=`hostname`</span><br><span class="line">rand=`<span class="built_in">head</span> /dev/urandom | <span class="built_in">tr</span> -dc A-Z | <span class="built_in">head</span> -c 5 ; <span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span>`</span><br><span class="line"><span class="built_in">sync</span> &amp;&amp; <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/j/root/testfile_<span class="variable">$&#123;f&#125;</span>_<span class="variable">$&#123;rand&#125;</span> bs=10M count=100 oflag=direct 2&gt;&amp;1 | <span class="built_in">cat</span></span><br></pre></td></tr></table></figure><p>然後透過 sbatch 發 jobs，關於 slurm 用法可參考這個<a href="https://slurm.schedmd.com/pdfs/summary.pdf">小抄</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># send 5 parallel jobs that write file to NFS</span></span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 5`; <span class="keyword">do</span> sbatch slurm_filewriter.sh ; <span class="keyword">done</span></span><br><span class="line">Submitted batch job 203</span><br><span class="line">Submitted batch job 204</span><br><span class="line">Submitted batch job 205</span><br><span class="line">Submitted batch job 206</span><br><span class="line">Submitted batch job 207</span><br><span class="line"> </span><br><span class="line"><span class="comment"># after squeue shows no job, can see that files has been written to NFS</span></span><br><span class="line">$ <span class="built_in">ls</span> -1 /j/root</span><br><span class="line">testfile_cloud-slurm-compute-0-0_CIDCR</span><br><span class="line">testfile_cloud-slurm-compute-0-0_GKCQM</span><br><span class="line">testfile_cloud-slurm-compute-0-0_XDIAQ</span><br><span class="line">testfile_cloud-slurm-compute-0-0_XJHTW</span><br><span class="line">testfile_cloud-slurm-compute-0-2_VPSEW</span><br></pre></td></tr></table></figure><p>至此整個 slurm cluster 就佈署到 GCP 上了，可以開始開心使用啦～<br>這樣的優點包含可以無上限擴充運算資源，再也不用等待！<br>NFS I&#x2F;O 根據我的測試也是完勝自架的分散式儲存系統！<br>壞處則是可能也許會有些貴…(?)</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://slurm.schedmd.com/documentation.html">https://slurm.schedmd.com/documentation.html</a></li><li><a href="https://codelabs.developers.google.com/codelabs/hpc-slurm-on-gcp">https://codelabs.developers.google.com/codelabs/hpc-slurm-on-gcp</a></li><li><a href="https://cloud.google.com/compute/docs/disks">https://cloud.google.com/compute/docs/disks</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  <hr><p><strong>雜談</strong></p><p>噫！好了！我畢業了！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;敝司長久以來都是自建 Cluster 來做為日常運算資源使用的，長時間一直都被擴充性、I&amp;#x2F;O 效能所卡住，若是卡在運算資源不夠光是採買新機器動輒要幾個月；被 share storage 的 I&amp;#x2F;O 效能卡住更慘，整個系統會慢到爆 job 都卡住…&lt;br&gt;所以我就在想有沒有辦法在雲上建立這種高效能運算叢集，想動態擴張幾台就幾台，再加上我相信無論是 AWS, GCP 等等大平台所提供的 NFS 服務應該都差不到哪裡去吧…? &lt;/p&gt;</summary>
    
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
    <category term="slurm" scheme="https://ssarcandy.tw/tags/slurm/"/>
    
    <category term="note" scheme="https://ssarcandy.tw/tags/note/"/>
    
    <category term="cloud" scheme="https://ssarcandy.tw/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>Develop a Plugin for Hexo</title>
    <link href="https://ssarcandy.tw/2020/02/09/develop-hexo-plugin/"/>
    <id>https://ssarcandy.tw/2020/02/09/develop-hexo-plugin/</id>
    <published>2020-02-09T05:42:04.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>這陣子心血來潮花了點時間整理敝部落格的原始碼，整理的過程發現其實可以把一些小工具獨立成模組，一方面可以讓 codebase 變精簡，另一方面則是抽出來的模組也可以給其他 Hexo 使用者使用。<br>一開始我以為只是搬移一下程式、剪剪貼貼就可以完成，後來越做越不對勁…原來要做一個 Hexo Plugin 也是滿多地方需要注意的。<br>最後的成品叫做 <a href="https://github.com/SSARCandy/hexo-tag-photozoom">hexo-tag-photozoom</a>，有興趣歡迎用用看～</p><span id="more"></span><h1 id="History-of-this-Feature"><a href="#History-of-this-Feature" class="headerlink" title="History of this Feature"></a>History of this Feature</h1><p>我這次要搬移的是我原本實作在 theme 裡面的功能，就是可以把內文圖片放大的功能，非常像 Medium 網站上按圖片會有的效果。效果如下：</p>    <div>      <img src="/img/2020-02-09/01.jpg" alt="按圖片會有跟 Medium 網站一樣的效果 (小螢幕裝置沒有)" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">按圖片會有跟 Medium 網站一樣的效果 (小螢幕裝置沒有)</span>    </div><p>原本我是直接在 theme 中使用 @nishanths 的 <a href="https://github.com/nishanths/zoom.js">zoom.js</a>，直接引用他的 sciprt，並自己註冊一個 Hexo tag：</p><figure class="highlight html"><figcaption><span>title: layout.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- in theme layout file include external resource --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/zoom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/zoom.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>title: scripts/helper.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;% zoom /path/to/image [/path/to/thumbnail] [title] %&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;zoom&#x27;</span>, <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; thumbnail, original, title &#125; = <span class="title function_">parse</span>(args);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;img src=&quot;<span class="subst">$&#123;(thumbnail || original)&#125;</span>&quot; alt=&quot;<span class="subst">$&#123;title&#125;</span>&quot; data-action=&quot;zoom&quot; class=&quot;photozoom&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>透過 <code>hexo.extend.tag.register</code> 可以註冊新的 tag 語法，可以直接在文章 markdown 中使用，這個 tag 本身把 <code>{% zoom %}</code> 轉換成完整的 html 格式，並且由於已經在前端引用 <code>zoom.js</code> library，所以就可以正常運作。</p><h1 id="Move-to-Seperate-Module"><a href="#Move-to-Seperate-Module" class="headerlink" title="Move to Seperate Module"></a>Move to Seperate Module</h1><p>原本的作法是直接在 layout 中引用 <code>zoom.&#123;js,css&#125;</code> library，這當然可行，但當要把這功能模組化時，是沒辦法直接接觸 layout 的 (除非你要在 readme 裡面叫使用者自己引用…)，所以必須要有個方式把這些必要的外部資源塞進去使用者的 html 裡面。<br>關於這段「如何把外部資源塞到使用者的靜態檔中」，我參考了其他 plugin 的做法，發現大部份都是使用 <code>hexo.extend.generator</code> 來達成。不過我最後選擇其他做法來完成這件事。</p><h2 id="Use-Hexo-Generator"><a href="#Use-Hexo-Generator" class="headerlink" title="Use Hexo Generator"></a>Use Hexo Generator</h2><p>Hexo 在編譯資源時，提供多種方式註冊自己的程式，來達到高度客製化。<br>其中 <code>Generator</code> 是用來產生檔案對應的路由，所以 <code>Generator</code> 都是回傳 <code>&#123; path: &#39;foo&#39;, data: &#39;foo&#39; &#125;</code> 的格式，代表著 path 對應的 data 是什麼。<br>透過 <code>Generator</code> 可以做到 copy file 的功能，官方網站也有提供<a href="https://hexo.io/api/generator.html#Copy-Files">範例</a>，再搭配註冊 tag ，就可以達成動態插入必要的外部資源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generator that create a virtual path to external file</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;asset&#x27;</span>, <span class="keyword">function</span>(<span class="params">locals</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;zoom/zoom.js&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;/path/to/zoom.js&#x27;</span>),</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;zoom/zoom.css&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;/path/to/zoom.css&#x27;</span>),</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// register tag that include generator&#x27;s path</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;zoom&#x27;</span>, <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; thumbnail, original, title &#125; = <span class="title function_">parse</span>(args);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script src=&quot;/zoom/zoom.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;link rel=&quot;stylesheet&quot; href=&quot;/zoom/zoom.css&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;img src=&quot;<span class="subst">$&#123;(thumbnail || original)&#125;</span>&quot; alt=&quot;<span class="subst">$&#123;title&#125;</span>&quot; data-action=&quot;zoom&quot; class=&quot;photozoom&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如此一來，每當使用者插入 <code>{% zoom %}</code> 時，就會被展開成包含 include 外部資源的 html code，來達成目的。</p><h2 id="Use-Hexo-Filter-Inject-Code"><a href="#Use-Hexo-Filter-Inject-Code" class="headerlink" title="Use Hexo Filter Inject Code"></a>Use Hexo Filter Inject Code</h2><p>然而剛剛的方式有些小缺點，比方說當使用者插入很多 <code>{% zoom %}</code> 的 tag 時，就會出現很多重複引用的程式碼，感覺也是怪怪的。<br>所以我最後利用另一種方式達到塞 code 的效果 － <code>Filter</code>。</p><p>Hexo Filter 提供很多 hook 的註冊點，比方說在渲染 html 之前執行註冊的 function …等等。<br>我這邊用的是 <code>after_generate</code>，就是在全部檔案產生完成之後執行，詳細 hook 名稱跟意義可參考<a href="https://hexo.io/api/filter#Filter-List">文件</a></p><p>透過 <code>after_generate filter</code> 我可以在最後決定是否要插入外部資源 <code>zoom.&#123;js,css&#125;</code>，實作如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_generate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> route = hexo.<span class="property">route</span>;</span><br><span class="line">  <span class="keyword">const</span> routes = route.<span class="title function_">list</span>().<span class="title function_">filter</span>(<span class="function"><span class="params">path</span> =&gt;</span> path.<span class="title function_">endsWith</span>(<span class="string">&#x27;.html&#x27;</span>));</span><br><span class="line">  <span class="keyword">const</span> map = routes.<span class="title function_">map</span>(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> html = route.<span class="title function_">get</span>(path);</span><br><span class="line">      <span class="keyword">let</span> htmlTxt = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      html.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> (htmlTxt += chunk));</span><br><span class="line">      html.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(htmlTxt, &#123; <span class="attr">decodeEntities</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&#x27;.photozoom&#x27;</span>).<span class="property">length</span>) &#123;</span><br><span class="line">          $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">append</span>(<span class="string">`&lt;script type=&quot;text/javascript&quot;&gt;<span class="subst">$&#123;fetch_asset(ZOOMJS_PATH)&#125;</span>&lt;/script&gt;`</span>);</span><br><span class="line">          $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">append</span>(<span class="string">`&lt;style&gt;<span class="subst">$&#123;fetch_asset(ZOOMCSS_PATH)&#125;</span>&lt;/style&gt;`</span>);              </span><br><span class="line">          hexo.<span class="property">log</span>.<span class="title function_">info</span>(<span class="string">`[hexo-tag-photozoom] Injected assets to <span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123; path, <span class="attr">html</span>: $.<span class="title function_">html</span>() &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// update route</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(map).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span></span><br><span class="line">    res.<span class="title function_">map</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123; route.<span class="title function_">set</span>(obj.<span class="property">path</span>, obj.<span class="property">html</span>); &#125;),</span><br><span class="line">  );  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我去掃所有 html 檔案，並搜尋有沒有 <code>div</code> class name 是 <code>photozoom</code> 的，如果有那就直接在 html body 插入所需的 javascript 跟 css 程式碼，非常暴力但還不錯～<br>且這作法同時兼顧如果有使用者想在非文章內容的地方使用 <code>zoom.js</code> 的效果，只需要在 <code>&lt;img&gt;</code> 中加上 <code>photozoom</code> class name，在每次編譯時都會掃到並在需要的地方插入程式碼。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://hexo.io/api/filter">Hexo Filter</a></li><li><a href="https://blog.gisonrg.me/2016/04/develop-hexo-github-card/">Develop a plugin for Hexo - Github Card</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;這陣子心血來潮花了點時間整理敝部落格的原始碼，整理的過程發現其實可以把一些小工具獨立成模組，一方面可以讓 codebase 變精簡，另一方面則是抽出來的模組也可以給其他 Hexo 使用者使用。&lt;br&gt;一開始我以為只是搬移一下程式、剪剪貼貼就可以完成，後來越做越不對勁…原來要做一個 Hexo Plugin 也是滿多地方需要注意的。&lt;br&gt;最後的成品叫做 &lt;a href=&quot;https://github.com/SSARCandy/hexo-tag-photozoom&quot;&gt;hexo-tag-photozoom&lt;/a&gt;，有興趣歡迎用用看～&lt;/p&gt;</summary>
    
    
    
    
    <category term="nodejs" scheme="https://ssarcandy.tw/tags/nodejs/"/>
    
    <category term="hexo" scheme="https://ssarcandy.tw/tags/hexo/"/>
    
    <category term="javascript" scheme="https://ssarcandy.tw/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Timing Attack in String Compare</title>
    <link href="https://ssarcandy.tw/2020/01/29/timing-attack/"/>
    <id>https://ssarcandy.tw/2020/01/29/timing-attack/</id>
    <published>2020-01-29T11:28:29.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>程式語言通常在執行的時候，為了要最佳化執行的速度，常常會利用所謂的 Early Return。<sup>[1]</sup><br>比如說條件式裡面 <code>if (a &amp;&amp; b)</code> 這種判斷式，假設已經知道 A == false，那其實就可以不需要知道 b 的值，如此就可以直接忽略 b 而達到更快的知道這個判斷式是否為真<sup>[2]</sup>。<br>同樣的這種作法其實會發生在很多地方，比方說像是比對兩個字串是否一樣：在很多程式語言中的實作其實就是遍歷兩個字串比對每一個字元，那只要過程中有一個字元不一樣那這兩個字串肯定就是不一樣，即可提早返回結果。</p><span id="more"></span><p>底下是 C 的 <code>strcmp</code> <a href="https://code.woboq.org/userspace/glibc/string/strcmp.c.html">程式碼片段</a>實作比較兩個字串是否一樣：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *p1, <span class="type">const</span> <span class="type">char</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *s1 = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) p1;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *s2 = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) p2;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> c1, c2;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  {</span><br><span class="line">    c1 = (<span class="type">unsigned</span> <span class="type">char</span>) *s1++;</span><br><span class="line">    c2 = (<span class="type">unsigned</span> <span class="type">char</span>) *s2++;</span><br><span class="line">    <span class="keyword">if</span> (c1 == <span class="string">'\0'</span>)</span><br><span class="line">      <span class="keyword">return</span> c1 - c2;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> (c1 == c2);</span><br><span class="line">  <span class="keyword">return</span> c1 - c2;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>從上面的邏輯可以看出來，如果第二個字元就不一樣的話，那我們馬上就可以結束整個邏輯然後返回兩個字串不一樣的結果，如此就能提升程式執行的速度。<br>而本文就是要來探討這種字串比對的方式所衍生的其他的安全性問題，也就是所謂的 Timing Attack</p><h1 id="Timing-Attack"><a href="#Timing-Attack" class="headerlink" title="Timing Attack"></a>Timing Attack</h1><blockquote><p>Timing Attack 其實就是所謂的時間差攻擊。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">  c1 = (<span class="type">unsigned</span> <span class="type">char</span>) *s1++;</span><br><span class="line">  c2 = (<span class="type">unsigned</span> <span class="type">char</span>) *s2++;</span><br><span class="line">  <span class="keyword">if</span> (c1 == <span class="string">'\0'</span>)</span><br><span class="line">    <span class="keyword">return</span> c1 - c2;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (c1 == c2);</span><br></pre></td></tr></table></figure><p>再來看一下剛剛字串比對的實作中的迴圈，由於這個迴圈實作的關係我們可以知道不同字串比對其實會花不一樣的時間，這很合理因為有時候比較字串到一半的時候我們就已經知道這兩個字串不一樣，所以提早返回結果。<br>那這樣到底有什麼安全性的問題呢？</p><p>試想，今天在輸入密碼的時候輸入錯了，結果電腦告訴你：「喔你第三個字元錯了。」<br>這樣其實蠻奇怪的吧？這表示假設駭客想要猜你的密碼，基本上他就可以先亂猜第一個字元，猜對之後再繼續猜一個字元…以此類推，那勢必可以破解密碼。</p><p>這個例子跟我們剛剛的字串比對其實基本上是同一件事情，因為如果你輸入密碼是<strong>錯的</strong>其實會比輸入<strong>正確</strong>密碼來的<strong>花更少的時間</strong>，因為錯誤密碼可能前幾個字元就錯所以提早返還結果。<br>雖然這時間上的差異幾乎微乎其微，但是只要多做幾次然後再平均一下，還是可以得出有意義的結果。<br>底下是一段程式碼來證明，只要多跑幾次就可以發現字串中不一樣的那個字元如果越後面字串比對的時間就會明顯有差異，利用這樣的資訊就可以慢慢推出答案的字串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;std::string&gt; str{</span><br><span class="line">    <span class="string">"x2345"</span>,</span><br><span class="line">    <span class="string">"1x345"</span>,</span><br><span class="line">    <span class="string">"12x45"</span>,</span><br><span class="line">    <span class="string">"123x5"</span>,</span><br><span class="line">    <span class="string">"1234x"</span>,</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ss: str) {</span><br><span class="line">    <span class="keyword">auto</span> start = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1e8</span>; i++) {</span><br><span class="line">        <span class="built_in">strcmp</span>(<span class="string">"12345"</span>, ss.<span class="built_in">c_str</span>());</span><br><span class="line">    }</span><br><span class="line">    std::chrono::duration&lt;<span class="type">double</span>&gt; diff{std::chrono::system_clock::<span class="built_in">now</span>() - start};</span><br><span class="line">    std::cout &lt;&lt; ss &lt;&lt; <span class="string">": "</span> &lt;&lt; diff.<span class="built_in">count</span>() &lt;&lt; <span class="string">" s\n"</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>這段程式會吐出以下的結果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x2345: 4.07176 s</span><br><span class="line">1x345: 4.89044 s</span><br><span class="line">12x45: 5.79689 s</span><br><span class="line">123x5: 6.84836 s</span><br><span class="line">1234x: 7.37571 s</span><br></pre></td></tr></table></figure><p>可以發現，比較的字串越後面才不一樣，花費越長的時間。這就是 Timing Attack 的主要概念。</p><h1 id="In-Real-World"><a href="#In-Real-World" class="headerlink" title="In Real World"></a>In Real World</h1><p>那在實務上這個漏洞會出現在哪裡呢？<br>其實要先知道這個漏洞的意義：必須要是那個答案字串是敏感資料，像是密碼、或者某種 Token。 如果不是敏感資料那就算可以間接猜出來也是沒有什麼意義。</p><h2 id="Account-x2F-Password-Login"><a href="#Account-x2F-Password-Login" class="headerlink" title="Account/Password Login"></a>Account/Password Login</h2><p>那就先來說說看最常見的密碼比對好了，現在隨處可見什麼帳號密碼登入，這種東西會不會踩到這個漏洞呢？就我的知識來講：基本上是不會。<br>因為假設是一個正常的後端工程師，他們不會去做所謂的密碼明文儲存。密碼這種東西即使在資料庫裡面也不會是明文儲存的，少說也是會經過一次雜湊而且還要加鹽。<sup>[3]</sup></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="27.536ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12171 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1105,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1574,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(2427.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3483.6,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(4371.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4760.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(5263.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5792.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(6261.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(6730.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(7446.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7931.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8382.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(9124.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10125,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(10594,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(11123,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(11421,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(11782,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>在資料庫存的會是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.864ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 2150 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1105,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1574,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g></g></svg></mjx-container> 而非 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="9.371ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 4142 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1032,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1501,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1970,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(2686,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3171,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3622,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container> 。</p><p>使用者輸入帳號密碼的時候，伺服器端會透過同樣的雜湊邏輯，就可以得出跟資料庫儲存的一樣的雜湊，這樣就完成一個正常的密碼驗證。<br>也由於 hashing 會讓輸入的字串跟得到的雜湊有很不一樣的結果，即使只改輸入的密碼一個字元，得到的 hash 也會完全不一樣。這樣的機制導致 Timing Attack 在這個例子上就完全沒有用了，因為攻擊者根本不能預期真正在做字串比對的那個雜湊是不是如攻擊者預期的一個字元一個字元改變，那如此即使有時間上的差異，也跟第幾個字元比對失敗沒有直接的關係。</p><h2 id="Request-Signature"><a href="#Request-Signature" class="headerlink" title="Request Signature"></a>Request Signature</h2><p>那到底有沒有其他例子是真的會需要注意這個漏洞的呢？我能想到的大概就是像是某些加密貨幣交易所，他們的 API 幾乎都需要做所謂的簽章。概念如下：交易所需要透過 API key/secret 確保這個請求是來自合法的使用者，所以每個請求都必須附帶上簽章，公式大概是這樣：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="42.256ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 18677.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(990,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(1467,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2067,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2596,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2957,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3529,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3980,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(4723.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5779.6,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(6667.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(7718.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(8468.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(9228.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9617.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(10120.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(10649.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(11100.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(11629.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(12507.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(12976.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13421.2,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(13924.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14375.2,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(14720.2,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(15205.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(15734.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(16095.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mtext" transform="translate(16561.2,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(16811.2,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(17332.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(17798.2,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(18288.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>這個的用意是使用者利用自己的私鑰去加密請求的參數，來證明自己是真的自己。<br>伺服器端則會用使用者本次請求的參數加上使用者的私鑰來去重組 Signature，假設 Signature 跟請求端附帶的一樣，那就是合法的請求。<br>在駭客的角度，由於沒有使用者的私鑰所以沒有辦法用正規途徑得到 Signature，但是利用 Timing Attack 這招就可以猜出本次請求所對應的 Signature 從而達到偽造身份的效果。但這有幾個不實際的地方：</p><ol><li>利用 Timing Attack 需要大量的嘗試，但通常伺服器端會有 rate limit，根本沒辦法在合理的時間猜到答案。</li><li>再者，這種 Signature 加密機制都會再帶一個所謂的 nonce<sup>[4]</sup>，所以其實實務上也很難有辦法利用 Timing Attack。</li></ol><p>講白了這個攻擊手段我個人覺得看起來很厲害但其實沒這麼可怕。除非是菜鳥工程師，不然實務上不太可能做出會被這個攻擊手段影響的系統…</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li>Return early and clearly <a href="https://arne-mertz.de/2016/12/early-return/">https://arne-mertz.de/2016/12/early-return/</a></li><li>這個例子其實是所謂的 Order of evaluation, 跟 Early return 有一點不同。<a href="https://en.cppreference.com/w/cpp/language/eval_order">https://en.cppreference.com/w/cpp/language/eval_order</a></li><li><a href="https://auth0.com/blog/adding-salt-to-hashing-a-better-way-to-store-passwords/">Adding Salt to Hashing: A Better Way to Store Passwords</a></li><li><a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">nonce</a> 可以有效避免重送攻擊。 (重送攻擊我常常用，可參考我的另一篇文章 <a href="/2019/10/02/game-design-from-perspective-of-hacker/">從奧客玩家視角看遊戲防禦性設計</a>)</li><li>另外補充一篇也是在介紹 Timing Attack 的文 <a href="https://snyk.io/blog/node-js-timing-attack-ccc-ctf/">Using Node.js Event Loop for Timing Attacks</a>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  </li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;程式語言通常在執行的時候，為了要最佳化執行的速度，常常會利用所謂的 Early Return。&lt;sup&gt;[1]&lt;/sup&gt;&lt;br&gt;比如說條件式裡面 &lt;code&gt;if (a &amp;amp;&amp;amp; b)&lt;/code&gt; 這種判斷式，假設已經知道 A == false，那其實就可以不需要知道 b 的值，如此就可以直接忽略 b 而達到更快的知道這個判斷式是否為真&lt;sup&gt;[2]&lt;/sup&gt;。&lt;br&gt;同樣的這種作法其實會發生在很多地方，比方說像是比對兩個字串是否一樣：在很多程式語言中的實作其實就是遍歷兩個字串比對每一個字元，那只要過程中有一個字元不一樣那這兩個字串肯定就是不一樣，即可提早返回結果。&lt;/p&gt;</summary>
    
    
    
    
    <category term="note" scheme="https://ssarcandy.tw/tags/note/"/>
    
    <category term="c++" scheme="https://ssarcandy.tw/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>從奧客玩家視角看遊戲防禦性設計</title>
    <link href="https://ssarcandy.tw/2019/10/02/game-design-from-perspective-of-hacker/"/>
    <id>https://ssarcandy.tw/2019/10/02/game-design-from-perspective-of-hacker/</id>
    <published>2019-10-02T15:31:16.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>常常聽到某某遊戲外掛猖獗，作弊仔沒品、破壞遊戲樂趣等等行徑。身為一個好奇寶寶，總是很想知道其中奧秘，雖然我沒有厲害到開發出什麼外掛程式，但這幾年也陸續發現多款遊戲設計上的缺陷，成功用非正當的方式遊玩遊戲 (好含蓄…XD)。看著看著也發現其實這些遊戲的開發者理論上有辦法防止這類型的攻擊，所以只好用我不專業的見解寫下這篇文章。</p><p>對沒錯我就是奧客玩家！</p><blockquote><p>本文提及的遊戲只代表曾經可以作弊，不代表現在或未來也可以。</p></blockquote><span id="more"></span><p>說到這幾年陸續看到有隙可趁的遊戲，方法不外乎是兩個，一是藉由封包攔截查看內容再藉由修改封包資訊重送來攻擊，二是直接更改記憶體位置的值，這兩個方法都是非常直接暴力，案例很多，容我一一介紹。</p><h1 id="Metal-Slug-Attack"><a href="#Metal-Slug-Attack" class="headerlink" title="Metal Slug Attack"></a>Metal Slug Attack</h1>    <div>      <img src="/img/2019-10-02/1.jpg" alt="這遊戲是我的啟蒙導師，他教會我好多網路傳輸知識。金幣 99999999+ 是基本" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">這遊戲是我的啟蒙導師，他教會我好多網路傳輸知識。金幣 99999999+ 是基本</span>    </div><p>其實這遊戲我已經寫過一篇文章了，但容我再次鞭屍 🤣</p><p>這遊戲是十分經典只要會察看網路封包，一定有辦法使用重送攻擊。到底什麼是查看封包再重送呢？來看看他的遊戲模式：基本上是關卡制塔防遊戲，勝利可以拿到獎勵。所以當我攔截到<strong>開始</strong>跟<strong>結束</strong>的封包訊息之後，我就可以直接自動刷關了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Start event level=HELL......<span class="variable">$i</span>"</span></span><br><span class="line">send_request \</span><br><span class="line">    <span class="string">"cover=1&amp;deck_no=12&amp;stage_id=<span class="variable">$stage_id</span>&amp;unit_ids[]=604&amp;unit_ids[]=485&amp;unit_level[]=50&amp;unit_level[]=50"</span> \</span><br><span class="line">    <span class="string">"https://msattack.snkplaymore.info/event/marathon2nd/battle_start/?kpi1=<span class="variable">$stage_id</span>"</span>  &gt; /dev/null</span><br><span class="line"></span><br><span class="line">send_request \</span><br><span class="line">    <span class="string">"stage_id=<span class="variable">$stage_id</span>&amp;battle_time=25&amp;drop_num=<span class="variable">$drop_num</span>"</span> \</span><br><span class="line">    <span class="string">"https://msattack.snkplaymore.info/event/marathon2nd/battle_win/"</span> &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Win event level=HELL........<span class="variable">$i</span>"</span></span><br></pre></td></tr></table></figure><p>可以看到所有的參數都是透過明文傳輸，唯一的保護是有使用 https，但這樣並無法防止封包被查看，因為只要建立 Proxy server 並自己簽署一個 SSL 憑證，還是可以偷看 https 的封包。<br>那如果我是開發者我會怎麼改善呢？比較基本的是加上 <code>nonce</code> 在 request 裡面並加密參數。<br><code>nonce</code> 本身是一個遞增數字，伺服器端須檢查 <code>nonce</code> 值要是遞增的不然就非合法。這種作法常見於加密貨幣交易所的 API 設計，這也是防止重送攻擊常見的手段。<sup>[1]</sup></p><h1 id="遊戲王-Duel-Links"><a href="#遊戲王-Duel-Links" class="headerlink" title="遊戲王 Duel Links"></a>遊戲王 Duel Links</h1><p>曾經風靡一陣子的遊戲王卡牌遊戲，同時也是伺服器設計有嚴重缺陷，嚴重到我覺得他們工程師可以東西收一收的程度。<br>這遊戲我開服三天就把全腳色練到滿等，同時集齊當時所有 UR SR 卡片，兩個禮拜後覺得太無聊直接棄坑，堪稱我玩過時間最短的遊戲。</p>    <div>      <img src="/img/2019-10-02/2.png" alt="Blue Eyes White Dragon!! 我有一打!!" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">Blue Eyes White Dragon!! 我有一打!!</span>    </div><p>其實他們犯了常見的錯誤，就是所謂 Atomic 操作原則。<br>有些事情是必須一起完成的，否則就應當全部都不算數。比如說：「我用十元買了一枝筆」，那我的錢包應該要減少十元，並且增加一枝筆。這其中每個動作缺一不可：如果錢包沒扣錢，則整段交易應該都要失敗並回復到原本的狀態。這很基本很合理。<br>此遊戲一樣是遊玩扣體力的機制，藉由有限體力來使一般人無法狂練等。但查看封包後發現，他開始關卡跟扣體力是兩個不同的 API，是透過遊戲先發送<strong>開始</strong>再發送<strong>扣體力</strong>的訊息，這樣一來我只要一直狂重送開始但不送扣體力，我就可以無限遊玩刷等。真的太扯了…..</p><p>另外在設計 server side service 時，有一個大原則就是不可以相信客戶端送來的資料，永遠必須做驗證。</p><p>而且客戶端不該發送結果，應該只發送欲執行的操作。用剛剛的例子來說：<br>「我用十元買了一枝筆，我的錢包減少十元，並且增加一枝筆。」→ 由客戶端計算結果是不可以的。<br>「我要用十元買一枝筆。」→ 只發送欲執行的操作，實際結果應由伺服器端執行，才能確保合法性。</p><p>唉，本遊戲真的是奇觀。</p><h1 id="Messanger-籃球、足球"><a href="#Messanger-籃球、足球" class="headerlink" title="Messanger 籃球、足球"></a>Messanger 籃球、足球</h1><p>Messanger 兩年前推出可以在聊天室內玩籃球的彩蛋，浪費了我無數個小時在那邊投籃，其實也是有辦法作弊的。<br>前面提到我目前知道的方法不外乎是藉由封包攔截重送來攻擊或是直接更改記憶體位置的值，facebook 在中間人攻擊下了不少工夫，至少就我的觀察只要使用任何 Proxy server 似乎都會無法正常使用 Messanger，所以封包攔截重送這條路就很難走了。</p><p>剩下試試直接更改記憶體位置吧，基本上原理就是掃過全部此應用程式用到的記憶體位置並尋找指定的數值。比如說投籃好了，投進 1 分時先尋找記憶體中數值等於 1 的，再投進一次就進一步搜尋數值等於 2 的記憶體位置，以此類推直到精確地找到代表分數的記憶體位置，再修改其值。</p>    <div>      <img src="/img/2019-10-02/3.png" alt="找到對的記憶體位置，成為灌籃高手不成問題！" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">找到對的記憶體位置，成為灌籃高手不成問題！</span>    </div><p>很遺憾的是如果遊戲是單機遊戲，基本上是不可能防止記憶體竄改的<sup>[2]</sup>，只能讓他變更難修改沒辦法完全防止。比較常見的做法是增加一個 dirty check 的檢查值，比如說分數的平方。在這樣的設計下，當你的分數被竄改成 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 時，你的檢查值如果不是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.031ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1339.8 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mn" transform="translate(936.2,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> ，那就代表本次分數不合法。但說實在的這種方式防君子不防小人，真的有耐心的還是找得出檢查值並加以修改…。</p><hr><p>不過其實這類的防禦性設計有時候根本不見得需要，以我上述提到的例子而言，除了遊戲王缺陷太嚴重以外，其實其他的都不見得需要做改善。像是 Metal Slug Attack 無法做到數據的篡改，能做到的只有自動花體力刷關；而 Messanger 的遊戲根本是類單機遊戲，就算拿高分也只是自爽。</p><p>所以到頭來，最有趣的還是尋找系統缺失的過程吧…😅</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">Cryptographic nonce</a></li><li><a href="https://gamedev.stackexchange.com/questions/48629/how-do-i-prevent-memory-modification-cheats">How do I prevent memory-modification cheats?</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;常常聽到某某遊戲外掛猖獗，作弊仔沒品、破壞遊戲樂趣等等行徑。身為一個好奇寶寶，總是很想知道其中奧秘，雖然我沒有厲害到開發出什麼外掛程式，但這幾年也陸續發現多款遊戲設計上的缺陷，成功用非正當的方式遊玩遊戲 (好含蓄…XD)。看著看著也發現其實這些遊戲的開發者理論上有辦法防止這類型的攻擊，所以只好用我不專業的見解寫下這篇文章。&lt;/p&gt;
&lt;p&gt;對沒錯我就是奧客玩家！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文提及的遊戲只代表曾經可以作弊，不代表現在或未來也可以。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="trashtalk" scheme="https://ssarcandy.tw/tags/trashtalk/"/>
    
  </entry>
  
  <entry>
    <title>Ways to Access Internal Network</title>
    <link href="https://ssarcandy.tw/2019/08/11/Ways-to-Access-Internal-Network/"/>
    <id>https://ssarcandy.tw/2019/08/11/Ways-to-Access-Internal-Network/</id>
    <published>2019-08-11T19:02:06.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>一般的公司或者實驗室都會隔離內部資源，只留一個統一的對外出口來達到比較高的安全性以及讓系統管理者較好控管。但是較高的安全性總是會帶來不便，這種隔離內部資源的架構導致我們無法直接存取內部資源，要透過一些拐彎抹角的方式來存取。</p><span id="more"></span><p>從以前當網管到現在工作一陣子之後，因為常常在家工作(加班?)，也累積了不少存取內部資源的方式，本篇就是紀錄一下這些方式，以免我這個金魚腦以後又忘記….</p><h1 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h1><p>使用 VPN 來存取 LAN 資源我想是最簡單直覺的了，前提是公司或實驗室有提供 VPN server 嘿。<br>阿假設你是系統管理者且你們想提供 VPN 服務，我會推薦使用 OpenVPN server，簡單易用。然後我之前有看到一個大神寫了個一鍵架設 VPN server 的 <a href="https://github.com/Nyr/openvpn-install">script</a><br>這個 script 從安裝，新增&#x2F;刪除使用者， 應有盡有，堪稱無敵(?)</p><p>OpenVPN client 端設定很簡單，只要匯入預先產生的金鑰 (<code>.ovpn</code>) 至 client 端應用程式即可。<br>OpenVPN client 端應用程式也是十分完備，無論 Windows&#x2F;Mac&#x2F;Android&#x2F;iOS 全都有！真的可以做到隨時隨地，手機拿起來就可以工作…?</p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>如果有時候你只是需要存取某台內部 server，只需要 terminal 環境，那其實直接使用 ssh 登入即可。如同引言所說，「通常一般的公司或者實驗室都會隔離內部資源，只留一個統一的對外出口」，那其實可以透過那台對望出口當作跳板，使用兩次 ssh 來做到登入你想要用的機器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ssh_key_path -p port username@office.domain.com</span><br><span class="line">ssh username@my_computer</span><br></pre></td></tr></table></figure><p>另外可以設定 ssh_config 來省去每次都要打一長串的指令，設定像這樣：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Host office</span><br><span class="line">    User username</span><br><span class="line">    HostName office.domain.com</span><br><span class="line">    Port 56789</span><br><span class="line">    IdentityFile ssh_key_path</span><br><span class="line"> </span><br><span class="line">Host my_computer_in_lan</span><br><span class="line">    User username</span><br><span class="line">    HostName 192.168.0.xx</span><br><span class="line">    ProxyJump  office</span><br><span class="line">    # If is Windows: use ProxyCommand:</span><br><span class="line">    #     ssh.exe office -W %h:%p</span><br></pre></td></tr></table></figure><p>這樣就只需要輸入 <code>ssh my_computer_in_lan</code> 即可。</p><p>然後給個小建議，系統管理者在設定對外 ssh 服務時，盡量設定成只允許 ssh-key 登入，並且把 ssh port 改成別的 (不要用預設 22)。網路世界很可怕 der~~ 用預設設定就不要抱怨天天被掃 port 或被暴力破解密碼 (想當初實驗室某伺服器 root 帳號被暴力破解，最後只好重灌QQ)。</p><h1 id="SSH-tunnel-browser-proxy"><a href="#SSH-tunnel-browser-proxy" class="headerlink" title="SSH tunnel + browser proxy"></a>SSH tunnel + browser proxy</h1><p>那假設你們的網管不願意提供 VPN 服務，你又想存取內部網頁之類的服務，匹如說內部自架的 GitLab，怎辦？<br>沒關係還是有招，這招叫做使用 ssh tunnel + browser proxy。聽起來很複雜？其實還好啦，這方法分為兩部分：</p><h2 id="打通-ssh-tunnel"><a href="#打通-ssh-tunnel" class="headerlink" title="打通 ssh tunnel"></a>打通 ssh tunnel</h2><p>ssh 其實是一個很強大的工具，藉由他其實可以做到打開一個通道，從你的電腦連通道組織的單一的對外出口，變成說只要透過這個 tunnel ，就等同連結到公司的那台對外的電腦上。指令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ssh_key_path \  <span class="comment"># As usual, use ssh key to access is better</span></span><br><span class="line">    -p 56789 \         <span class="comment"># Your ssh server port</span></span><br><span class="line">    -vvv \             <span class="comment"># robust logging</span></span><br><span class="line">    -NfD 12345 \       <span class="comment"># N: do nothing, f: in background, D: create socket5 proxy</span></span><br><span class="line">    username@office.domain.com</span><br></pre></td></tr></table></figure><p>這神奇指令幫你打通一個 socket5 的通道，然後再設定瀏覽器去使用這個 proxy，就可以達成跟 vpn 一樣的效果！</p><h2 id="設定瀏覽器"><a href="#設定瀏覽器" class="headerlink" title="設定瀏覽器"></a>設定瀏覽器</h2><p>我這邊列出在 Mac 跟 Windows 上設定 proxy 的方式，但我想其他瀏覽器一定也有對應的方式設定。</p><ul><li>Mac: <code>open -a &quot;Google Chrome&quot; --args --proxy-server=&quot;socks5://localhost:12345&quot;</code></li><li>Windows: 在 chrome 上案右鍵 &gt; 內容 &gt; 目標: <code>&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --proxy-server=&quot;socks5://localhost:12345&quot;</code></li></ul><h1 id="Use-VSCode-to-access-remote-project"><a href="#Use-VSCode-to-access-remote-project" class="headerlink" title="Use VSCode to access remote project"></a>Use VSCode to access remote project</h1><p>有時候其實只是想用遠端電腦寫程式，用 ssh 當然也可，只是就是限制只能用 vim 之類的編輯器。<br>VSCode 最近推出了實用的 remote-ssh 功能，讓在家也可以使用遠端電腦開發。</p><p>可參考 ssh 那段來設定好 ssh_config，其他就如同平常使用 vscode 一樣，十分方便。</p><hr><p>雜談:</p><ul><li>最近很多想寫想留個紀錄的東西，但總是有點沒時間寫 (或懶?)</li><li>本站最近突破四萬瀏覽囉～！恭喜四萬人浪費了五分鐘 (平均網頁停留時間)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般的公司或者實驗室都會隔離內部資源，只留一個統一的對外出口來達到比較高的安全性以及讓系統管理者較好控管。但是較高的安全性總是會帶來不便，這種隔離內部資源的架構導致我們無法直接存取內部資源，要透過一些拐彎抹角的方式來存取。&lt;/p&gt;</summary>
    
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
    <category term="note" scheme="https://ssarcandy.tw/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Monitoring: from Handcraft to Prometheus</title>
    <link href="https://ssarcandy.tw/2019/06/10/Monitoring-from-Handcraft-to-Prometheus/"/>
    <id>https://ssarcandy.tw/2019/06/10/Monitoring-from-Handcraft-to-Prometheus/</id>
    <published>2019-06-10T16:41:55.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>身為一個系統管理者，時常要花時間確保系統正常運行，這時一個好的監控系統就很重要，將所有必要的資訊統整在一個畫面上一目瞭然，既能節省時間，當有問題時又能快速找出問題所在，好處多多。</p><span id="more"></span><p>從前從前，在我還小的時候（大概三四年前），我租了一台小的 Ubuntu cloud server 來跑一些小專案，從那時候開始我就一直想要一個可以監控程式或者伺服器的狀態的東西，那時候查到了 <a href="https://github.com/Tjatse/pm2-gui">pm2 monitor</a> 跟 <a href="https://github.com/netdata/netdata">netdata</a> ，其中 netdata 那時候搞半天弄不好（現在有了 docker 大概一秒就搞定吧），再加上我比較在意我的 node.js 的程式狀態，最後選擇使用 pm2 monitor。</p>    <div>      <img src="/img/2019-06-11/01.png" alt="pm2 monitor screenshot" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">pm2 monitor screenshot</span>    </div><p>過一陣子後，正好有機會成為 CMLab 的網管，一下子要管的機器從原本自己的一台變成超過二十台，又重新讓我思考該怎麼才能好好監控這些機器的狀態。那時候前人（學長姊吧?）留下來的一個網頁，採用 snmp 協定將各台資料彙整至 web server，實作上使用 perl 彙整並產生 HTML 檔，呈現如下：</p>    <div>      <img src="/img/2019-06-11/02.png" alt="" data-action="zoom" class="photozoom">          </div><p>老實說雖然簡陋，但完全可以一目瞭然各台機器狀況，可以稱做一個不錯的監控系統了，那時候我也基於這個網頁再實作額外的自動警報系統，當記憶體或 CPU 用量過高時，發警訊到我的 Facebook Messanger 群組。順便呢也寫了一篇文章記錄： <a href="/2016/11/17/cml-fb-bot/" title="用 Facebook 聊天機器人當通知系統">用 Facebook 聊天機器人當通知系統</a></p><p>從那時候之後我就秉持著要啥自己幹的原則，又利用類似 Pull Based 的方式由一台機器整合的作法，實作出另一套專門監控多台 GPU 伺服器的 <a href="/2017/08/25/multi-server-gpu-status-monitor/" title="Multi-server GPU status monitor">Multi-server GPU status monitor</a>，實驗室大家看起來也是挺喜歡這個的 (還曾被教授關注表示讚 🥰)，至今仍在運作也令我相當開心～</p>    <div>      <img src="/img/2019-06-11/03.png" alt="Multi-server GPU status monitor 暨用量檢舉系統一隅" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">Multi-server GPU status monitor 暨用量檢舉系統一隅</span>    </div><p>時間快轉到近期，又遇到一樣的狀況：同樣有一堆機器要監控。於是我就又再自幹了一套，只是這次實作方式並非是各自產生資料再由一台彙整的作法，而是一台機器主動去各台電腦撈取狀態。當然，這次重作絕對是做得比以前實驗室那用 perl 寫的來的好維護許多，外觀上也比較漂亮～</p>    <div>      <img src="/img/2019-06-11/04.png" alt="示意圖。任何狀態: 機器死掉、閒置、目前使用狀況都顯示在同一個畫面上。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">示意圖。任何狀態: 機器死掉、閒置、目前使用狀況都顯示在同一個畫面上。</span>    </div><p>依舊是要啥自己做、高度客製化，整合所有我想知道的事情，稍微不一樣的是這次我將前後分離，資料搜集器負責蒐集我在意的資料 (metrics)，存成 JSON file 直接由前端抓取，資料形式大致如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;research01&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Uptime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;178 days&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Users&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2 users&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;1m Load&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.29&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;5m Load&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.34&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;15m Load&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.56&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;CPU cores&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MemTotal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20440876&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MemAvailable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12715432&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;SwapTotal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9389048&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;SwapFree&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8332180&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;DiskTotal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;531G&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;DiskUsed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;264G&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Disk%&quot;</span><span class="punctuation">:</span> <span class="string">&quot;52&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Update Time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16:15&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>這樣做的好處是這些 metrics 可以直接被其他人存取，像是我另外用 React Native 來做手機版的 Dashboard；以及一些 Alerter 就是直接讀取這個 JSON，有別於之前寫的 Facebook Messanger Alerter 去爬網頁才得到資料，少繞一圈。</p><hr><p>然而就在最近，有同事就說：阿幹嘛不用 <a href="https://prometheus.io/">Prometheus</a> ? 研究一下才發現，嗯…這東西真的很厲害 XD<br>有 <a href="https://prometheus.io/">Prometheus</a> 當 metric collector，加上 <a href="https://grafana.com/">Grafana</a> 高度客製化的前端 Dashboard，要監控甚麼幾乎只剩要實作 exporter 而已（而且大部分狀況都有現成的）。</p><p>整個心路歷程走過來，從一開始用簡單的現成工具 &#x3D;&gt; 自幹 &#x3D;&gt; 自幹（前後端分離）&#x3D;&gt; 到最後又回到使用現成但更成熟的工具… 有種繞了一圈的感覺哈哈。<br>但我還是認真覺得我自己做的 Dashboard 比 Grafana 好看…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;身為一個系統管理者，時常要花時間確保系統正常運行，這時一個好的監控系統就很重要，將所有必要的資訊統整在一個畫面上一目瞭然，既能節省時間，當有問題時又能快速找出問題所在，好處多多。&lt;/p&gt;</summary>
    
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
    <category term="trashtalk" scheme="https://ssarcandy.tw/tags/trashtalk/"/>
    
  </entry>
  
  <entry>
    <title>Setup Slurm Cluster</title>
    <link href="https://ssarcandy.tw/2019/03/16/Setup-Slurm-Cluster/"/>
    <id>https://ssarcandy.tw/2019/03/16/Setup-Slurm-Cluster/</id>
    <published>2019-03-16T15:06:53.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>Slurm 是一個專門拿來做分散式平行運算的平台，已被各式超級運算電腦群集採用<sup>[1]</sup>。跟 Hadoop 其實有點像，但是我個人感覺是 Slurm 好用太多，更穩定更快速，而且不用會 Java…XD<br>最近剛好有機會需要建立以及管理一個 Slurm Cluster，就想說來記錄一下過程以及一些雷。</p><span id="more"></span><p>先來看一張 Slurm 架構的圖，基本上最重要的兩個東西就是 (1) Slurm Controller (slurmctld) 跟 (2) Slurm Compute Node (slurmd)，Controller 是拿來分配任務用的，他管理所有 Compute Node，負責決定哪個任務該去哪個 Node 執行，而 Compute Node 就是真的會執行任務的機器。</p>    <div>      <img src="/img/2019-03-16/1.png" alt="Slurm 架構圖。 <sup>[2]</sup>" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">Slurm 架構圖。 <sup>[2]</sup></span>    </div><p>所以要建置一個 Slurm Cluster，最少要弄一個 Controller 跟多個 Compute Nodes，至於其他像是 slurmdbd 等等，就並不是必需的東西。</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>在開始安裝 Controller 跟 Compute Node 之前，要先準備一些事情，</p><ol><li>需要安裝 <code>munge</code>，透過 <code>apt-get install libmunge-dev libmunge2 munge</code> 即可。</li><li>需要創一個 <code>slurm</code> 帳號跟一個 <code>munge</code> 帳號，並且要在所有機器上都有這些帳號 (uid 也必須一致)。</li></ol><p><code>munge</code> 是 slurm 拿來做 Authentication 的組件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a slurm user, and change it to some id, the is must same across nodes.</span></span><br><span class="line">$ useradd slurm; usermod slurm -u 151; groupmod -g 151 slurm;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Change the munge user id, the is must same across nodes.</span></span><br><span class="line">$ killall munged; usermod munge -u 150; groupmod -g 150 munge; <span class="built_in">chown</span> munge:munge -R /var/log/munge/ /run/munge /var/lib/munge /etc/munge</span><br></pre></td></tr></table></figure><h1 id="Setup-Slurm-Controller"><a href="#Setup-Slurm-Controller" class="headerlink" title="Setup Slurm Controller"></a>Setup Slurm Controller</h1><p>下載原始碼來編譯然後安裝</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp; wget https://download.schedmd.com/slurm/slurm-18.08.2.tar.bz2; tar xvjf slurm-18.08.2.tar.bz2; <span class="built_in">cd</span> slurm-18.08.2/</span><br><span class="line">(./configure --prefix=/usr &amp;&amp; make &amp;&amp; make install) | <span class="built_in">tee</span> /tmp/slurm.setup.log 2&gt;&amp;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>雖然 <code>apt-get install slurm</code> 有東西，但那個不是對的…</p><p>安裝好以後，可以透過一個網頁來設定基本的 config 檔，預設位置在 <code>/usr/share/doc/slurmctld/slurm-wlm-configurator.html</code>，設定好以後存檔並放至 <code>/etc/slurm-llnl/slurm.conf</code>。記得更改權限。然後就可以啟用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set slurmctld &amp; slurmdbd auto start via systemd (only for the controller)</span></span><br><span class="line"><span class="built_in">cp</span> /tmp/slurm-18.08.2/etc/slurmctld.service /lib/systemd/system/slurmctld.service</span><br><span class="line"><span class="built_in">cp</span> /tmp/slurm-18.08.2/etc/slurmdbd.service /lib/systemd/system/slurmdbd.service</span><br><span class="line">systemctl daemon-reload                  <span class="comment"># force systemd reload unit</span></span><br><span class="line">systemctl <span class="built_in">enable</span> slurmdbd slurmctld      <span class="comment"># force slurmdbd &amp; slurmctld start after the machine is ready</span></span><br><span class="line">systemctl start slurmdbd slurmctld       <span class="comment"># start slurmdbd &amp; slurmctld</span></span><br><span class="line">systemctl status slurmdbd slurmctld      <span class="comment"># check slurmdbd &amp; slurmctld status</span></span><br><span class="line">systemctl is-enabled slurmdbd slurmctld  <span class="comment"># check slurmdbd &amp; slurmctld enabled</span></span><br></pre></td></tr></table></figure><h1 id="Setup-Slurm-Compute-Nodes"><a href="#Setup-Slurm-Compute-Nodes" class="headerlink" title="Setup Slurm Compute Nodes"></a>Setup Slurm Compute Nodes</h1><p>Slurm Compute Node 也可以透過 <code>apt</code> 安裝，但是由於我需要使用 slurm 的一些 api，所以這部分會使用從 source code 建置。</p><p>先安裝 <code>munge</code>，改 user id 以及複製 munge key:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copy munge key from slurm controller</span></span><br><span class="line">$ scp controller:/etc/munge/munge.key /etc/munge/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Change the permissions</span></span><br><span class="line">$ <span class="built_in">chown</span> munge:munge /etc/munge/munge.key</span><br><span class="line">$ <span class="built_in">chmod</span> 400 /etc/munge/munge.key</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Start munge service</span></span><br><span class="line">$ service munge start</span><br></pre></td></tr></table></figure><p>接下來先下載 slurm source code，並且 build</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install slurm</span></span><br><span class="line">$ <span class="built_in">cd</span> /tmp; wget https://download.schedmd.com/slurm/slurm-18.08.2.tar.bz2; tar xvjf slurm-18.08.2.tar.bz2; <span class="built_in">cd</span> slurm-18.08.2/</span><br><span class="line">$ (./configure &amp;&amp; make &amp;&amp; make install) | <span class="built_in">tee</span> /tmp/slurm.setup.log 2&gt;&amp;1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Copy slurm.conf, and add slurm user</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /usr/etc /var/spool/slurmctld /var/spool/slurmd</span><br><span class="line">$ scp controller:/usr/etc/slurm.conf /usr/etc/slurm.conf</span><br><span class="line">$ useradd slurm; usermod slurm -u 151; groupmod -g 151 slurm; <span class="built_in">chown</span> slurm:slurm -R /var/log/slurm* /run/slurm* /var/lib/slurm* /etc/slurm* /var/spool/slurm*</span><br><span class="line"></span><br><span class="line"><span class="comment"># set slurmd auto start via system (for the controller and workers)</span></span><br><span class="line"><span class="built_in">cp</span> /tmp/slurm-18.08.2/etc/slurmd.service /lib/systemd/system/slurmd.service</span><br><span class="line">systemctl daemon-reload     <span class="comment"># force systemd reload unit</span></span><br><span class="line">systemctl <span class="built_in">enable</span> slurmd     <span class="comment"># force slurmd start when the machine is ready.</span></span><br><span class="line">systemctl start slurmd      <span class="comment"># start slurmd</span></span><br><span class="line">systemctl status slurmd     <span class="comment"># check slurmd status</span></span><br><span class="line">systemctl is-enabled slurmd <span class="comment"># check slurmd enabled </span></span><br></pre></td></tr></table></figure><p>到此基本完成 Slurm Cluster 的設定，可以透過一些指令來檢查 slurm 的狀態。</p><p><strong>sinfo</strong>: 會顯示目前 cluster nodes 的狀態</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST</span><br><span class="line">research*    up   infinite      1   idle research[01-10]</span><br><span class="line">research*    up   infinite      3  alloc research[11-15]</span><br></pre></td></tr></table></figure><p><strong>squeue</strong>: 顯示目前正在執行&#x2F;等待執行的任務</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)</span><br><span class="line">578116  research     test  user123  R       0:06      1 research12</span><br><span class="line">578116  research     test  user123  R       0:06      1 research12</span><br><span class="line">578116  research     test  user123  R       0:06      1 research12</span><br><span class="line">578116  research     test  user123  R       0:13      1 research15</span><br><span class="line">578116  research     test  user123  R       0:16      1 research13</span><br></pre></td></tr></table></figure><p><strong>scancel</strong>: 取消任務</p><p>還有很多其他指令，可以看這張 <a href="https://slurm.schedmd.com/pdfs/summary.pdf">Cheat sheet</a>。</p><h1 id="Some-Common-Issues"><a href="#Some-Common-Issues" class="headerlink" title="Some Common Issues"></a>Some Common Issues</h1><p>使用的過程中總是會遇到一些奇奇怪怪的問題，這邊就列舉一些我常見的:</p><h2 id="Zero-Bytes-were-transmitted-or-received"><a href="#Zero-Bytes-were-transmitted-or-received" class="headerlink" title="Zero Bytes were transmitted or received"></a>Zero Bytes were transmitted or received</h2><p>在使用 slurm 相關的指令時噴出的錯誤。<br>這個基本上是因為 Authentication 出錯，把所有 nodes 的 munge 重啟就會解決。</p><h2 id="Slurm-job-stock-in-CG-state"><a href="#Slurm-job-stock-in-CG-state" class="headerlink" title="Slurm job stock in CG state"></a>Slurm job stock in CG state</h2><p>有時候會發現有一些 Job 就是一直卡在 Completing (CG state)，這時候把那個 node 設為 down 再設為 resume 就會消失了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ scontrol update nodename=research04 state=down reason=job_stuck;</span><br><span class="line">$ scontrol update nodename=research04 state=resume</span><br></pre></td></tr></table></figure><h2 id="Invalid-job-credential"><a href="#Invalid-job-credential" class="headerlink" title="Invalid job credential"></a>Invalid job credential</h2><p>這表示有些 node 沒有 slurm, munge user，或者他們的 uid 不一致，解決方法就是把他們設為一致。</p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://en.wikipedia.org/wiki/Slurm_Workload_Manager">https://en.wikipedia.org/wiki/Slurm_Workload_Manager</a></li><li><a href="https://slurm.schedmd.com/overview.html">https://slurm.schedmd.com/overview.html</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;Slurm 是一個專門拿來做分散式平行運算的平台，已被各式超級運算電腦群集採用&lt;sup&gt;[1]&lt;/sup&gt;。跟 Hadoop 其實有點像，但是我個人感覺是 Slurm 好用太多，更穩定更快速，而且不用會 Java…XD&lt;br&gt;最近剛好有機會需要建立以及管理一個 Slurm Cluster，就想說來記錄一下過程以及一些雷。&lt;/p&gt;</summary>
    
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
    <category term="slurm" scheme="https://ssarcandy.tw/tags/slurm/"/>
    
    <category term="note" scheme="https://ssarcandy.tw/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Mac 維修小記</title>
    <link href="https://ssarcandy.tw/2018/08/17/mbpr2015-repair/"/>
    <id>https://ssarcandy.tw/2018/08/17/mbpr2015-repair/</id>
    <published>2018-08-17T20:13:08.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子我的 Macbook pro 13” (2015) 出現奇怪的問題，突然一直跳出訊息叫我連接藍芽滑鼠，內建觸控板跟鍵盤完全失靈，看著電腦登入畫面我卻什麼都做不了，超級崩潰…</p><p>後來稍微多重開機試幾次發現這種狀況有時候會消失，查一下網路發現大概有幾種可能，一是主機板壞了，二是鍵盤跟滑鼠的連接到主機板的排線壞了。但是這兩種壞法修的價格可差距不少，所以我就堅信只是排線壞了（Ｘ</p><span id="more"></span><p>既然都免不了要維修一趟了，又由於官方的螢幕脫膜更換計畫規定是購買日四年內可免費更換，我這台剛好接近過期，就想說順便將我螢幕也換掉。所以我打算維修的問題就有兩件：</p><ol><li>維修鍵盤滑鼠失靈</li><li>更換螢幕</li></ol><p>但由於我螢幕脫膜的情況非常輕微，大概只有一兩根細線般的脫落，所以我先跑去學校內的授權店詢問這種狀況是不是可以更換，結果馬上被打槍說這麼輕微不可能可以換，不信自己去直營店問。</p><p>既然都被這麼打槍了，我就只好轉戰 101 直營店拉…</p><p>久聞直營店非常難排到維修，我每天開 Genius Bar 預約維修，然後無論平日假日時段永遠是滿的，非常驚人…後來發現據說 iPhone 有 App 可以比網頁版多提前預約一天，根本歧視非 iPhone 用戶…難怪網頁版永遠預約不到。嘗試預約兩三天後我就放棄了，打算直接耗一整天去現場排候補維修名額。就這樣，我大約中午時刻到達 101 直營店，進門右手邊就是 Genius Bar 排隊的地方。排到以後會寄一封簡訊來，並在快輪到時會再寄一封來提醒，我自己大概是等了五個小時才輪到我…</p><p>輪到我之後就要我描述狀況，可以的話儘量直接重現問題給他們看，就會減少很多檢測，剛好我那天鍵盤滑鼠依舊是不能使用的狀況，所以他們只跑簡單的檢測就結束了。（為了跑檢測他們還跑去拿外接鍵盤跟滑鼠 XD）</p><p>另外關於螢幕脫膜的部分二話不說直接跟我說可以換～</p><p>後來在報價時跟我說可能要換主機板，我就說我只想換排線跟螢幕，如果要修主機板我就不修了。店員也就如實把我的需求寫進備註。</p>    <div>      <img src="/img/2018-08-18/01.png" alt="如果要換主機板我就不想修了。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">如果要換主機板我就不想修了。</span>    </div><p>送修之後雖然說 3-5 天會打給我告知維修情況，但根本沒打來…<br>過了大概 20 天之後才寄信來說可以取貨，也附上維修明細。</p>    <div>      <img src="/img/2018-08-18/02.png" alt="維修明細，只需支付排線的錢。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">維修明細，只需支付排線的錢。</span>    </div><p>總結來說 Apple 直營店的服務還算不錯，更換鍍膜完全不會阻撓，檢測維修時也十分迅速。缺點就是預約維修太難，現場排也要超久真的很花時間…</p><p>所以若需要去直營店維修的話有幾個建議：</p><ul><li>有 iPhone 的話可以用他們的 App 來預約，可以比其他人更容易約到。</li><li>沒有 iPhone 的話…乖乖早點去現場排吧…</li></ul><hr><p>雜談</p><ul><li>有點久沒新文章了…人就是這樣一怠墮就永無止盡QQ</li><li>理論上最近應該是滿閒的應該要提高產出…</li><li>時間都被 Slay the Spire 吃光光…</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前陣子我的 Macbook pro 13” (2015) 出現奇怪的問題，突然一直跳出訊息叫我連接藍芽滑鼠，內建觸控板跟鍵盤完全失靈，看著電腦登入畫面我卻什麼都做不了，超級崩潰…&lt;/p&gt;
&lt;p&gt;後來稍微多重開機試幾次發現這種狀況有時候會消失，查一下網路發現大概有幾種可能，一是主機板壞了，二是鍵盤跟滑鼠的連接到主機板的排線壞了。但是這兩種壞法修的價格可差距不少，所以我就堅信只是排線壞了（Ｘ&lt;/p&gt;</summary>
    
    
    
    
    <category term="trashtalk" scheme="https://ssarcandy.tw/tags/trashtalk/"/>
    
  </entry>
  
  <entry>
    <title>Use PyTorch to solve FizzBuzz</title>
    <link href="https://ssarcandy.tw/2018/01/14/use-pytorch-to-solve-fizzbuzz/"/>
    <id>https://ssarcandy.tw/2018/01/14/use-pytorch-to-solve-fizzbuzz/</id>
    <published>2018-01-14T17:13:49.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>FizzBuzz 是一個常見的程式考題，題目很簡單，就是給一個整數，如果可以被 15 整除就回傳 FizzBuzz；可以被 3 整除就回傳 Fizz；被 5 整除就回傳 Buzz；都不能整除就回傳原本的數字。</p><p>用 Python 可以簡單幾行就寫出來：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fizz_buzz</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">15</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;FizzBuzz&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Fizz&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> num % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Buzz&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br></pre></td></tr></table></figure><p>不過有狂人就把這當作分類問題，用 tensorflow 來解這個問題，原文<a href="http://joelgrus.com/2016/05/23/fizz-buzz-in-tensorflow/">在此</a>，是篇很有趣的文章 XD</p><span id="more"></span><p>由於原文是用 tensorflow 實作，我想我就來寫個 PyTorch 版練習一下吧！<br>基本上就是把 FizzBuzz 當作分類問題 (Classification) 來訓練，要做的事大概有這些：</p><ol><li>準備 training, testing data</li><li>定義 model</li><li>Training</li></ol><p>那就來一步一步看看</p><h1 id="準備資料"><a href="#準備資料" class="headerlink" title="準備資料"></a>準備資料</h1><p>雖然 FizzBuzz 輸入是一個整數，但是把他轉成二進位會比較好訓練，所以先來寫個轉二進位的函式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), (<span class="string">&#x27;&#123;:010b&#125;&#x27;</span>).<span class="built_in">format</span>(num))) </span><br></pre></td></tr></table></figure><p>因為我不想 <code>import numpy</code>，所以這邊轉二進位的方式是用 Python 的 format 來做。</p><p>另外還要把 FizzBuzz 改寫成回傳分類號碼：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fizz_buzz</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">15</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="comment"># &#x27;FizzBuzz&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> <span class="comment"># &#x27;Fizz&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> num % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> <span class="comment"># &#x27;Buzz&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> <span class="comment"># num</span></span><br></pre></td></tr></table></figure><p>接下來要來產生資料拉</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_data</span>(<span class="params">num_of_data, batch_size</span>):</span><br><span class="line">    xs, ys = [], []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_of_data):</span><br><span class="line">        x = random.randint(<span class="number">0</span>, <span class="number">2</span>**DIGITS-<span class="number">1</span>)</span><br><span class="line">        xs += [encode(x)]</span><br><span class="line">        ys += [fizz_buzz(x)]</span><br><span class="line">    <span class="keyword">return</span> xs, ys</span><br></pre></td></tr></table></figure><p>由於 training 的時候通常會是一批一批 (batch) 下去訓練的，所以在準備資料時就先一批一批放在一起會比較方便。</p><p>所以改一下，</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_data</span>(<span class="params">num_of_data, batch_size</span>):</span><br><span class="line">    xs, ys, data = [], [], []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_of_data):</span><br><span class="line">        x = random.randint(<span class="number">0</span>, <span class="number">2</span>**DIGITS-<span class="number">1</span>)</span><br><span class="line">        xs += [encode(x)]</span><br><span class="line">        ys += [fizz_buzz(x)]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(num_of_data//batch_size):</span><br><span class="line">        xxs = xs[b*batch_size:(b+<span class="number">1</span>)*batch_size]</span><br><span class="line">        yys = ys[b*batch_size:(b+<span class="number">1</span>)*batch_size]</span><br><span class="line">        data += [(xxs, yys)]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>前置步驟都弄好之後，終於可以來產生訓練跟測試資料拉，Batch size 就訂個 32 好了：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">training_data = make_data(<span class="number">1000</span>, <span class="number">32</span>)</span><br><span class="line">testing_data = make_data(<span class="number">100</span>, <span class="number">32</span>)</span><br></pre></td></tr></table></figure><h1 id="定義-Model"><a href="#定義-Model" class="headerlink" title="定義 Model"></a>定義 Model</h1><p>其實我對於如何設計 model 還是沒有很了解，不過這問題應該是挺簡單的，弄個幾層 fully-connected layer 應該就夠了吧?</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FizzBuzz</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channel, out_channel</span>):</span><br><span class="line">        <span class="built_in">super</span>(FizzBuzz, self).__init__()</span><br><span class="line">        self.layers = nn.Sequential(</span><br><span class="line">            nn.Linear(in_channel, <span class="number">1024</span>),</span><br><span class="line">            nn.ReLU(), <span class="comment"># Activation function</span></span><br><span class="line">            nn.Linear(<span class="number">1024</span>, <span class="number">1024</span>),</span><br><span class="line">            nn.ReLU(), <span class="comment"># Activation function</span></span><br><span class="line">            nn.Linear(<span class="number">1024</span>, out_channel)</span><br><span class="line">        )</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.layers(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Input 10 digits vector (binary format), output 4 classes vector</span></span><br><span class="line">model = FizzBuzz(<span class="number">10</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>我用了一層隱藏層，1024 個神經元，activation function 則都是最基本的 ReLU 。<br><code>in_channel</code>, <code>out_channel</code> 分別是輸入數字是長度多少的二進位 (10)，以及輸出幾種分類 (4)。<br>PyTorch 的 model 是繼承 <code>torch.nn.Module</code> 來寫個 class，通常只要定義 <code>__init()__</code> 跟 <code>forward()</code>就好，如果要自己做特殊的 backward 的話，也可以實作 <code>backward()</code>。</p><h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><p>整個訓練的過程基本就是按照一般的分類問題流程做，把資料丟進 model 的到預測，把預測跟正確答案做 cross entropy 當作 loss ，然後去最小化這個 loss</p><p>用 PyTorch 寫大概是這樣：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">training</span>(<span class="params">model, optimizer, training_data</span>):</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> training_data:</span><br><span class="line">        data = Variable(torch.FloatTensor(data))</span><br><span class="line">        label = Variable(torch.LongTensor(label))</span><br><span class="line">        optimizer.zero_grad() <span class="comment"># Clear gradient</span></span><br><span class="line">        out = model(data) <span class="comment"># predict by model</span></span><br><span class="line">        classification_loss = F.cross_entropy(out, label) <span class="comment"># Cross entropy loss</span></span><br><span class="line">        classification_loss.backward() <span class="comment"># Calculate gradient</span></span><br><span class="line">        optimizer.step() <span class="comment"># Update model parameters</span></span><br></pre></td></tr></table></figure><p>由於 要是 <code>Variable</code> 才能自動算 back propagation ，所以 data 跟 label 都要變成 <code>Variable</code>。<br>這邊我用的 optimize 方法是 Stochastic Gradient Descent (SGD)，記得每次都要先清空 gradient 再做 backward。</p><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>萬事皆備，可以開始來看看結果如何了，來 train 300 個 Epoch 好了，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==== Start Training ====</span><br><span class="line">Epoch  50/300, Loss: 0.78973, Accuracy: 64.58%</span><br><span class="line">Epoch 100/300, Loss: 0.29299, Accuracy: 91.67%</span><br><span class="line">Epoch 150/300, Loss: 0.14616, Accuracy: 93.75%</span><br><span class="line">Epoch 200/300, Loss: 0.10606, Accuracy: 96.88%</span><br><span class="line">Epoch 250/300, Loss: 0.09937, Accuracy: 96.88%</span><br><span class="line">Epoch 300/300, Loss: 0.06472, Accuracy: 98.96%</span><br></pre></td></tr></table></figure><p>哇！才 98% 準確率呢… 拿去 online judge 解題大概不會過呢 XD</p><hr><p>如果想要玩玩看我的 code，這邊可以看：<br><a href="https://github.com/SSARCandy/pytorch_fizzbuzz">https://github.com/SSARCandy/pytorch_fizzbuzz</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;FizzBuzz 是一個常見的程式考題，題目很簡單，就是給一個整數，如果可以被 15 整除就回傳 FizzBuzz；可以被 3 整除就回傳 Fizz；被 5 整除就回傳 Buzz；都不能整除就回傳原本的數字。&lt;/p&gt;
&lt;p&gt;用 Python 可以簡單幾行就寫出來：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;fizz_buzz&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;FizzBuzz&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;Fizz&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;Buzz&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(num)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不過有狂人就把這當作分類問題，用 tensorflow 來解這個問題，原文&lt;a href=&quot;http://joelgrus.com/2016/05/23/fizz-buzz-in-tensorflow/&quot;&gt;在此&lt;/a&gt;，是篇很有趣的文章 XD&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://ssarcandy.tw/tags/python/"/>
    
    <category term="pytorch" scheme="https://ssarcandy.tw/tags/pytorch/"/>
    
    <category term="machine learning" scheme="https://ssarcandy.tw/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>搞懂 JavaScript 原型鍊</title>
    <link href="https://ssarcandy.tw/2017/12/06/javascript-prototype-chain/"/>
    <id>https://ssarcandy.tw/2017/12/06/javascript-prototype-chain/</id>
    <published>2017-12-06T00:40:01.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>最近突然看到許多關於 js 原型鍊的介紹，這東西我從來沒搞懂過也沒認真想要搞懂過 XD<br>說真的好像不懂也不會影響甚麼，畢竟實戰上基本用不到這些比較底層的東西…<br>但是當作是邊緣冷知識來看看也是挺不錯的~</p><span id="more"></span><h1 id="歷史"><a href="#歷史" class="headerlink" title="歷史"></a>歷史</h1><p>JavaScript，一個為了網頁互動而誕生的腳本語言，最早是因為 Netscape 開發了一個比較成熟的瀏覽器 Navigator，但由於沒有可以讓網頁與使用者互動的方式，所以他們就開發了 JavaScript 來當作網頁的腳本語言，其中主要開發者是 <em>Brendan Eich</em>。<br>由於當時物件導向正夯，Brendan Eich 也決定讓 JavaScript 所有東西都是 Object。<br>如此用途明確的語言，似乎不太需要非常完整的底層架構吧？用不著像 C++, Java 這種泛用式程式語言一樣完整，所以 Brendan Eich 並不打算引入 Class 的概念。但又由於JavaScript 所有東西都是 Object，勢必要有種方法做到類似<strong>繼承</strong>這件事。<br>所以原型鍊就出現了！</p><h1 id="JavaScript-語法背後的運作"><a href="#JavaScript-語法背後的運作" class="headerlink" title="JavaScript 語法背後的運作"></a>JavaScript 語法背後的運作</h1><p>JavaScript 要建構一個 instance 會用 <code>new</code> 關鍵字，但實際上這 <code>new</code> 跟 C++, Java 的不一樣。<br>JavaScript 的 new 其實後面接的是一個 function，類似於 C++ constroctor</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> man1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> man2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Andy&#x27;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(man1.<span class="property">sayHi</span> === man2.<span class="property">sayHi</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面這段例子是 JavaScript 創造實例的方式。<br>可以看到 <code>Person</code> 中有兩個東西，一個是 name, 另一個是 Person 的 method <code>sayHi</code>，雖然這樣很好了，但是這樣 <code>man1</code>, <code>man2</code> 中其實包含了一樣的 <code>sayHi</code> function，浪費記憶體空間。</p><p>所以如果要做一個類別共用的方法可以這樣:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> man1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> man2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Andy&#x27;</span>);</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(man1.<span class="property">sayHi</span> === man2.<span class="property">sayHi</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>把類別共用的 function 寫在 <code>prototype</code> 中就可以達成共用的效果，而其實這個 <code>prototype</code> 就是原型鍊。</p><h1 id="用原型鍊模擬繼承"><a href="#用原型鍊模擬繼承" class="headerlink" title="用原型鍊模擬繼承"></a>用原型鍊模擬繼承</h1><p>我們用瀏覽器偵錯模式印變數的時候，相信經常看到 <code>__proto__</code> 藏在變數裡，那個東東就是原型鍊。<br>JavaScript 中有幾個預設的類別，像是 Object, Array 等等，我們在宣告變數的時候其實裡面都會藉由原型鍊 <strong>串</strong> 到預設的類別。</p>    <div>      <img src="/img/2017-12-06/01.PNG" alt="a 的 __proto__ 指向 Object" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">a 的 __proto__ 指向 Object</span>    </div><p>所以其實在創造實例時，JavaScript 會把 <code>__proto__</code> 指向他的原型，以空物件 <code>&#123;&#125;</code> 而言，就是預設類別 <code>Object</code>。<br>回到上面 Person 的例子，他的原型鍊就會是長這樣:</p>    <div>      <img src="/img/2017-12-06/02.PNG" alt="man 的 sayHi 是定義在他的 __proto__ 中" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">man 的 sayHi 是定義在他的 __proto__ 中</span>    </div><p>可以發現寫在 <code>Person.prototype</code> 的 <code>sayHi</code> ，實際上是定義在 <code>man.__proto__.sayHi</code> ，也就是 Person 的原型，而在呼叫 <code>man.sayHi()</code> 時，由於找不到，所以 JavaScript 會藉由<code>__proto__</code>嘗試往上找，就會在 <code>man.__proto__</code> 中找到。</p><p>而這個一直往上一層原型找的過程，其實就模擬了繼承的效果。</p><h1 id="ES6-語法糖與原型鍊"><a href="#ES6-語法糖與原型鍊" class="headerlink" title="ES6 語法糖與原型鍊"></a>ES6 語法糖與原型鍊</h1><p>雖說 JavaScript 當初沒有 Class 的概念，但在 ES6 中其實出現 class 關鍵字了，但其實這只是一個語法糖而已，可以藉由幾個例子發現 ES6 背後還是透過原型鍊來運作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">level1</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getX</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">level2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">level1</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getY</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">y</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> l2 = <span class="keyword">new</span> <span class="title function_">level2</span>();</span><br></pre></td></tr></table></figure><p>上面這個例子是用 ES6 寫的繼承小程式， level2 繼承 level1 。直接來看看創造出的實例 <code>l2</code> 裡面是什麼:</p>    <div>      <img src="/img/2017-12-06/03.PNG" alt="ES6 的繼承其實也是用原型鍊串起來的。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">ES6 的繼承其實也是用原型鍊串起來的。</span>    </div><p>又看到原型鍊了！<br><code>l2</code> 的原型鍊串成這樣: <code>l2</code> → <code>level1</code> → <code>Object</code>。<br>看看 <code>getX</code>, <code>getY</code> 就會發現他們定義在不同層級，因為 <code>getX</code> 是父類別的方法，所以在原型鍊中的更上一層。<br>由此就可以看出 ES6 雖然有 class 關鍵字，但其實原理還是原型鍊。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Javascript继承机制的设计思想</a></li><li><a href="http://blog.techbridge.cc/2017/04/22/javascript-prototype/">該來理解 JavaScript 的原型鍊了</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  <hr><p><strong>雜談</strong><br>除了學校教的 C&#x2F;C++ 以外，我似乎沒去搞懂過其他語言背後的邏輯，秉持者會用就好的心態活到現在(X<br>這次稍微理解原型鍊以後，好像又更了解一點 JavaScript 了呢～！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近突然看到許多關於 js 原型鍊的介紹，這東西我從來沒搞懂過也沒認真想要搞懂過 XD&lt;br&gt;說真的好像不懂也不會影響甚麼，畢竟實戰上基本用不到這些比較底層的東西…&lt;br&gt;但是當作是邊緣冷知識來看看也是挺不錯的~&lt;/p&gt;</summary>
    
    
    
    
    <category term="javascript" scheme="https://ssarcandy.tw/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Deep CORAL: Correlation Alignment for Deep Domain Adaptation</title>
    <link href="https://ssarcandy.tw/2017/10/31/deep-coral/"/>
    <id>https://ssarcandy.tw/2017/10/31/deep-coral/</id>
    <published>2017-10-31T13:18:50.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>雖然現在可以透過 Deep neural networks 來訓練出非常強大的能力，但卻難以學到比較通用的知識，通常最後訓練出的 model 會只適合處理類似於 training data 的資料。<br>Domain adaption 是目前在 machine learning 比較新的問題，是希望可以讓 network 學到比較跨領域的 features ，進而使訓練出來的模型可以應用在不同 domain 的資料上。</p><p>這篇論文<sup>[1]</sup> (Deep CORAL: Correlation Alignment for Deep Domain Adaptation, B Sun, K Saenko, ECCV 2016) 提出一個 CORAL loss，通過對 source domain 和 target domain 進行線性變換來將他們各自的的二階統計量對齊 (minimizing the difference between source/target correlations).</p><span id="more"></span><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>作者引入了 CORAL<sup>[2]</sup> 這一方法，並且將其擴展成一 differentiable loss function。</li><li>作者藉由 CORAL loss 來做 unsupervised learning，並達到了 state-of-the-art 的 performance。</li><li>CORAL loss 十分簡單並且可以輕易地整合至一般的神經網路中。</li></ul><h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1>    <div>      <img src="/img/2017-10-31/1.png" alt="作者將 CORAL loss 加進一分類問題的網路架構中。 <sup>[1]</sup>" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">作者將 CORAL loss 加進一分類問題的網路架構中。 <sup>[1]</sup></span>    </div><p>作者將 Deep CORAL 應用在一般的分類問題上，整個神經網路架構如圖。從中間 <code>cov1</code> ~ <code>fc8</code> 其實就是一般的 AlexNet，只是稍作修改改成有兩個 input (source data &amp; target data) 以及兩個 output。</p><p>在訓練的過程中，每個 batch 都包含了 source data &amp; target data，其中 source data 是包含 label 資料的；而 target data 則完全沒有 label 資料。<br>source data &amp; target data 各自經過一 shared weight 的 networks 之後會有兩個 output，其中:</p><ul><li>source task 會算一個 classification loss</li><li>source 的 <code>fc8</code> 及 target 的 <code>fc8</code> 會再拿來算 CORAL loss</li></ul><p>而總和 loss 為兩者相加:<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.381ex;" xmlns="http://www.w3.org/2000/svg" width="24.228ex" height="1.951ex" role="img" focusable="false" viewBox="0 -694 10708.9 862.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(783,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1252,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1998.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3054.6,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="TeXAtom" transform="translate(331,-152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(1441,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(2191,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(2836,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6119.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7119.4,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="msub" transform="translate(7702.4,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="TeXAtom" transform="translate(331,-152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(1523,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(2282,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(3032,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></g></g></svg></mjx-container></p><h1 id="CORAL-Loss"><a href="#CORAL-Loss" class="headerlink" title="CORAL Loss"></a>CORAL Loss</h1><p>作者提出的 CORAL loss 是在計算 source &amp; target covariance matrix 之間的 distance。</p><blockquote><p>We define the CORAL loss as the distance between the second-order statistics<br>(covariances) of the source and target features.</p></blockquote><h2 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h2><p>而這個 loss function 定義如下:</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.651ex;" xmlns="http://www.w3.org/2000/svg" width="26.293ex" height="4.688ex" role="img" focusable="false" viewBox="0 -1342 11621.6 2071.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="TeXAtom" transform="translate(331,-152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(1523,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(2282,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(3032,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3284.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(4340,0)"><g data-mml-node="mn" transform="translate(698.3,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-719.9)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="msup" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><rect width="1656.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6236.6,0)"><path data-c="2016" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"></path></g><g data-mml-node="msub" transform="translate(6736.6,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(8212.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(9213.1,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msubsup" transform="translate(10508.9,0)"><g data-mml-node="mo"><path data-c="2016" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(533,-247.8) scale(0.707)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></g></svg></mjx-container></p><p>其中，<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.837ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 1254.1 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.932ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 1295.8 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container> 為 source, target 的 covariance matrix，其定義如下:</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.927ex;" xmlns="http://www.w3.org/2000/svg" width="42.555ex" height="4.963ex" role="img" focusable="false" viewBox="0 -1342 18809.5 2193.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(250,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(1781.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2837.6,0)"><g data-mml-node="mn" transform="translate(1400.8,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(1361.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2361.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="3061.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6139.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(6528.2,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,503.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="mi" transform="translate(861,-324.9) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="msub" transform="translate(7895.3,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(9484.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(10484.8,0)"><g data-mml-node="mn" transform="translate(539.5,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><rect width="1339.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(12063.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(12452.9,0)"><g data-mml-node="mtext"><path data-c="1D425" d="M43 686L134 690Q225 694 226 694H232V62H301V0H292Q274 3 170 3Q67 3 49 0H40V62H109V332Q109 387 109 453T110 534Q110 593 108 605T94 620Q80 624 53 624H40V686H43Z"></path></g><g data-mml-node="TeXAtom" transform="translate(352,421.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g></g><g data-mml-node="msub" transform="translate(13248,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="msup" transform="translate(14615.1,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="mo" transform="translate(15480.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(15869.3,0)"><g data-mml-node="mtext"><path data-c="1D425" d="M43 686L134 690Q225 694 226 694H232V62H301V0H292Q274 3 170 3Q67 3 49 0H40V62H109V332Q109 387 109 453T110 534Q110 593 108 605T94 620Q80 624 53 624H40V686H43Z"></path></g><g data-mml-node="mo" transform="translate(352,421.1) scale(0.707)"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="msub" transform="translate(16664.4,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(18031.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18420.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.891ex;" xmlns="http://www.w3.org/2000/svg" width="43.216ex" height="4.928ex" role="img" focusable="false" viewBox="0 -1342 19101.5 2178"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(250,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(1823.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2879.4,0)"><g data-mml-node="mn" transform="translate(1421.6,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(1403,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2403.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="3103.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6222.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(6611.6,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,503.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="mi" transform="translate(861,-305.1) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msub" transform="translate(8020.4,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(9651.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(10651.7,0)"><g data-mml-node="mn" transform="translate(560.4,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><rect width="1380.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(12272.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(12661.5,0)"><g data-mml-node="mtext"><path data-c="1D425" d="M43 686L134 690Q225 694 226 694H232V62H301V0H292Q274 3 170 3Q67 3 49 0H40V62H109V332Q109 387 109 453T110 534Q110 593 108 605T94 620Q80 624 53 624H40V686H43Z"></path></g><g data-mml-node="TeXAtom" transform="translate(352,421.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g></g><g data-mml-node="msub" transform="translate(13456.6,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(14865.4,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="mo" transform="translate(15730.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(16119.6,0)"><g data-mml-node="mtext"><path data-c="1D425" d="M43 686L134 690Q225 694 226 694H232V62H301V0H292Q274 3 170 3Q67 3 49 0H40V62H109V332Q109 387 109 453T110 534Q110 593 108 605T94 620Q80 624 53 624H40V686H43Z"></path></g><g data-mml-node="mo" transform="translate(352,421.1) scale(0.707)"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="msub" transform="translate(16914.7,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(18323.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18712.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>詳細符號定義可以參考 paper<sup>[1]</sup> section 3.1</p><h2 id="Backward-gradient"><a href="#Backward-gradient" class="headerlink" title="Backward (gradient)"></a>Backward (gradient)</h2><p>至於 gradient 可以由 chain rule 算出來，如下:</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.864ex;" xmlns="http://www.w3.org/2000/svg" width="59.306ex" height="6.011ex" role="img" focusable="false" viewBox="0 -1391 26213 2656.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="A0" d=""></path></g><g data-mml-node="mfrac" transform="translate(250,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="TeXAtom" transform="translate(331,-152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(1523,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(2282,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(3032,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(1000.1,-925.2)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msubsup" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,497.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mi" transform="translate(861,-324.9) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g><rect width="3772.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4540.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(5596,0)"><g data-mml-node="mn" transform="translate(2268,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-719.9)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(956.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1345.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(2706.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3707.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4207.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="4796.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10632.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(11021.1,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,503.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="mi" transform="translate(861,-324.9) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(12610.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(13610.7,0)"><g data-mml-node="mn" transform="translate(539.5,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><rect width="1339.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(15189.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(15578.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(15967.7,0)"><g data-mml-node="mtext"><path data-c="1D425" d="M43 686L134 690Q225 694 226 694H232V62H301V0H292Q274 3 170 3Q67 3 49 0H40V62H109V332Q109 387 109 453T110 534Q110 593 108 605T94 620Q80 624 53 624H40V686H43Z"></path></g><g data-mml-node="TeXAtom" transform="translate(352,421.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g></g><g data-mml-node="msub" transform="translate(16762.9,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="msup" transform="translate(18130,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="msup" transform="translate(18995.1,0)"><g data-mml-node="mtext"><path data-c="1D425" d="M43 686L134 690Q225 694 226 694H232V62H301V0H292Q274 3 170 3Q67 3 49 0H40V62H109V332Q109 387 109 453T110 534Q110 593 108 605T94 620Q80 624 53 624H40V686H43Z"></path></g><g data-mml-node="TeXAtom" transform="translate(352,421.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g></g><g data-mml-node="msup" transform="translate(19790.3,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g></g><g data-mml-node="mo" transform="translate(20655.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(21044.4,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(22520.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(23521,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(24816.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msup" transform="translate(25205.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.784ex;" xmlns="http://www.w3.org/2000/svg" width="61.443ex" height="5.931ex" role="img" focusable="false" viewBox="0 -1391 27157.9 2621.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="A0" d=""></path></g><g data-mml-node="mfrac" transform="translate(250,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="TeXAtom" transform="translate(331,-152.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(1523,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(2282,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(3032,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(1000.1,-925.2)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msubsup" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,497.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mi" transform="translate(861,-305.1) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><rect width="3772.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4540.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5596,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(6374,0)"><g data-mml-node="mn" transform="translate(2288.9,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-719.9)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(956.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1345.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(2748.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3748.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4248.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="4837.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(11451.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msubsup" transform="translate(11840.8,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,503.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="mi" transform="translate(861,-305.1) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(13471.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(14472.1,0)"><g data-mml-node="mn" transform="translate(560.4,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><rect width="1380.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(16092.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(16481.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(16870.9,0)"><g data-mml-node="mtext"><path data-c="1D425" d="M43 686L134 690Q225 694 226 694H232V62H301V0H292Q274 3 170 3Q67 3 49 0H40V62H109V332Q109 387 109 453T110 534Q110 593 108 605T94 620Q80 624 53 624H40V686H43Z"></path></g><g data-mml-node="TeXAtom" transform="translate(352,421.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g></g><g data-mml-node="msub" transform="translate(17666,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="msup" transform="translate(19074.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g><g data-mml-node="msup" transform="translate(19940,0)"><g data-mml-node="mtext"><path data-c="1D425" d="M43 686L134 690Q225 694 226 694H232V62H301V0H292Q274 3 170 3Q67 3 49 0H40V62H109V332Q109 387 109 453T110 534Q110 593 108 605T94 620Q80 624 53 624H40V686H43Z"></path></g><g data-mml-node="TeXAtom" transform="translate(352,421.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g></g><g data-mml-node="msup" transform="translate(20735.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22BA" d="M318 -182Q302 -212 280 -212H278H275Q249 -212 239 -182L238 84V351H162L87 352Q57 362 57 391T84 429Q89 431 280 431H470L474 429Q477 427 479 426T484 423T490 417T495 410T499 402T500 391Q500 365 470 352L394 351H318V-182Z"></path></g></g></g><g data-mml-node="mo" transform="translate(21600.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(21989.3,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g><g data-mml-node="mo" transform="translate(23465.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(24465.8,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(25761.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msup" transform="translate(26150.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container></p><p>注意 target 那邊是有個負號的，當初在實作時忘記這個負號而搞半天…</p><h1 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h1><p>作者做的實驗也是在分類問題上，架構如同上面提及的神經網路架構圖。<br>實驗採用 Office31 dataset<sup>[3]</sup>，這是一個專門拿來做 domain adaption 的資料集，裡面有三種不同 domain 的影像: Amazon, DSLR, and Webcam<br>裡面都有相同的 31 種類別，也就是說這三大類唯一不同的點就是圖片的樣貌:</p><ul><li>Amazon 就是去背的圖片(背景都是白色的)</li><li>DSLR 就是用單眼拍的圖片(背景就是真實場景的背景)</li><li>Webcam 跟 DSLR 很相近，差別比較大的部分是 webcam 的畫質比較差，有的還有色偏</li></ul><p>在實驗進行過程中，source data 會有 label；而 target data 則沒有。<br>且在開始之前會先預載 ImageNet pre-trained model。</p><p>由於 Office31 有三種 domain data，所以作者就做了所有 domain adaption 的組合，以下是結果圖:</p>    <div>      <img src="/img/2017-10-31/2.png" alt="各種方法比較圖。螢光的是作者的方法。<sup>[1]</sup>" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">各種方法比較圖。螢光的是作者的方法。<sup>[1]</sup></span>    </div><p>可以看到 D-CORAL 在大部分的 domain adaption tasks 中都取得了最好的成績。</p><p>再來看看其中一個實驗 Amazon → Webcam 的詳細結果:</p>    <div>      <img src="/img/2017-10-31/3.png" alt="Amazon → Webcam 的詳細結果圖。<sup>[1]</sup>" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">Amazon → Webcam 的詳細結果圖。<sup>[1]</sup></span>    </div><p>圖 (a) 比較了有 CORAL loss 與沒有 CORAL loss 的差別，可以看到當加入CORAL loss 之後，target (test) task 有顯著的提升，而且並未使得 source (training) task 的準確率下降太多。</p><p>圖 (b) 則可以看出，classification loss 跟 CORAL loss 其實是扮演互相抗衡的腳色，隨著訓練的進行會讓兩者到達一穩定的狀態。</p><h1 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h1><p>我也試著用 PyTorch 實做了此篇論文的方法，最重要的其實就是新增一 loss function 到整個網路架構中，其中 forward and backward 的算法剛好也有詳細說明。</p><p>Forward 的部分大概如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, source, target</span>):</span><br><span class="line">    d = source.shape[<span class="number">1</span>]</span><br><span class="line">    ns, nt = source.shape[<span class="number">0</span>], target.shape[<span class="number">0</span>]</span><br><span class="line">    cs = feature_covariance_mat(ns, source)</span><br><span class="line">    ct = feature_covariance_mat(nt, target)</span><br><span class="line">    self.saved = (source, target, cs, ct, ns, nt, d)</span><br><span class="line">    res = forbenius_norm(cs - ct)**<span class="number">2</span>/(<span class="number">4</span>*d*d)</span><br><span class="line">    res = torch.FloatTensor([res])</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>Backward 則如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backward</span>(<span class="params">self, grad_output</span>):</span><br><span class="line">    source, target, cs, ct, ns, nt, d = self.saved</span><br><span class="line">    ones_s_t = torch.ones(ns).view(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">    ones_t_t = torch.ones(nt).view(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">    s_gradient = (source.t() - (ones_s_t.matmul(source).t().matmul(ones_s_t)/ns)).t().matmul(cs - ct) / (d*d*(ns - <span class="number">1</span>))</span><br><span class="line">    t_gradient = (target.t() - (ones_t_t.matmul(target).t().matmul(ones_t_t)/nt)).t().matmul(cs - ct) / (d*d*(nt - <span class="number">1</span>))</span><br><span class="line">    t_gradient = -t_gradient</span><br><span class="line">    <span class="keyword">return</span> s_gradient*grad_output, t_gradient*grad_output</span><br></pre></td></tr></table></figure><p>寫起來公式的部分又臭又長 XD</p><p>我也實際跑了 Amazon → Webcam 的例子，做了個圖:</p>    <div>      <img src="/img/2017-10-31/4.png" alt="我做出來的 Amazon → Webcam 的詳細結果圖。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">我做出來的 Amazon → Webcam 的詳細結果圖。</span>    </div><p>可以看出有 CORAL loss 的確使得 target task 的準確率提升一些。<br>不過我做出來的整體準確率並沒有與論文上的一樣有 60% 左右，而是大概在 50% 左右，不知道為甚麼… QQ</p><h1 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h1><p>經過 <a href="https://github.com/redhat12345">redhat12345</a> 的建議後，修正了一下 CORAL Loss 的算法，終於使 Target accuracy 提升到原論文的程度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">CORAL</span>(<span class="params">source, target</span>):</span><br><span class="line">    d = source.data.shape[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># source covariance</span></span><br><span class="line">    xm = torch.mean(source, <span class="number">1</span>, keepdim=<span class="literal">True</span>) - source</span><br><span class="line">    xc = torch.matmul(torch.transpose(xm, <span class="number">0</span>, <span class="number">1</span>), xm)</span><br><span class="line">    <span class="comment"># target covariance</span></span><br><span class="line">    xmt = torch.mean(target, <span class="number">1</span>, keepdim=<span class="literal">True</span>) - target</span><br><span class="line">    xct = torch.matmul(torch.transpose(xmt, <span class="number">0</span>, <span class="number">1</span>), xmt)</span><br><span class="line">    <span class="comment"># frobenius norm between source and target</span></span><br><span class="line">    loss = torch.mean(torch.mul((xc - xct), (xc - xct)))</span><br><span class="line">    loss = loss/(<span class="number">4</span>*d*d)</span><br><span class="line">    <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure>    <div>      <img src="/img/2017-10-31/5.png" alt="修正過後的結果。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">修正過後的結果。</span>    </div><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li>Sun, B., Saenko, K.: Deep CORAL: Correlation Alignment for Deep Domain Adaptation. In: ECCV (2016)</li><li>Sun, B., Feng, J., Saenko, K.: Return of frustratingly easy domain adaptation. In: AAAI (2016)</li><li><a href="https://people.eecs.berkeley.edu/~jhoffman/domainadapt/#datasets_code">Domain Adaptation Project</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;雖然現在可以透過 Deep neural networks 來訓練出非常強大的能力，但卻難以學到比較通用的知識，通常最後訓練出的 model 會只適合處理類似於 training data 的資料。&lt;br&gt;Domain adaption 是目前在 machine learning 比較新的問題，是希望可以讓 network 學到比較跨領域的 features ，進而使訓練出來的模型可以應用在不同 domain 的資料上。&lt;/p&gt;
&lt;p&gt;這篇論文&lt;sup&gt;[1]&lt;/sup&gt; (Deep CORAL: Correlation Alignment for Deep Domain Adaptation, B Sun, K Saenko, ECCV 2016) 提出一個 CORAL loss，通過對 source domain 和 target domain 進行線性變換來將他們各自的的二階統計量對齊 (minimizing the difference between source/target correlations).&lt;/p&gt;</summary>
    
    
    
    
    <category term="paper" scheme="https://ssarcandy.tw/tags/paper/"/>
    
    <category term="python" scheme="https://ssarcandy.tw/tags/python/"/>
    
    <category term="pytorch" scheme="https://ssarcandy.tw/tags/pytorch/"/>
    
    <category term="machine learning" scheme="https://ssarcandy.tw/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Using PyTorch in Windows 10</title>
    <link href="https://ssarcandy.tw/2017/09/27/using-pytorch-in-windows/"/>
    <id>https://ssarcandy.tw/2017/09/27/using-pytorch-in-windows/</id>
    <published>2017-09-27T14:17:32.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>最近開始在使用 PyTorch 寫些東東，他支援 MacOS&#x2F;Linux 使用，唯獨 Windows 不支援…<br>所以我一直都是使用 Mac 寫相關的東西。</p><p>但是我的桌機都是 Windows，在可以用桌機的環境下卻必須使用小小的 Mac 打字真的不是很高興…<br>正好最近從學長那邊得知有個方法可以讓 Windows 使用 PyTorch ，就趕緊來試試！</p><span id="more"></span><p>Window 10 現在有個東西叫 Windows Subsystem for Linux (WSL) ，是一個在 Windows 下的 Ubuntu 子系統，這個子系統可以做到任何正常 Ubuntu 做得到的事。<br>那我就可以在 WSL 中按照 Linux 的流程設定好 PyTorch 的相關環境，然後在 Windows 中使用 WSL 的 Python 環境，就可以達到目的 (讓 Windows 使用 PyTorch)。</p><p>所以基本上環境設置步驟：</p><ol><li>啟用 Windows Subsystem for Linux 。</li><li>弄好 WSL 中的環境，包含 Python 以及 ssh server 的設定。</li><li>讓 Windows 使用遠端 (WSL) 的 Python 環境。</li></ol><h1 id="Install-Windows-Subsystem-for-Linux"><a href="#Install-Windows-Subsystem-for-Linux" class="headerlink" title="Install Windows Subsystem for Linux"></a>Install Windows Subsystem for Linux</h1><ol><li>開啟<strong>開發人員模式</strong></li><li>用系統管理員開啟 cmd，輸入 <code>OptionalFeatures</code> 指令，會跳出一個視窗</li></ol>    <div>      <img src="/img/2017-09-27/01.png" alt="勾選「適用於 Linux 的 Windows 子系統」" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">勾選「適用於 Linux 的 Windows 子系統」</span>    </div><p>完成以後可能需要重開機。</p><h1 id="Install-PyTorch-in-WSL"><a href="#Install-PyTorch-in-WSL" class="headerlink" title="Install PyTorch in WSL"></a>Install PyTorch in WSL</h1><p>接下來是要在 WSL 中設置 Python 以及 PyTorch 的相關環境。<br>如果沒有 Python 記得先安裝。</p><p>然後安裝 PyTorch，基本上按照 <a href="http://pytorch.org/">PyTorch 官方網站</a> 教學操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install http://download.pytorch.org/whl/cu75/torch-0.2.0.post3-cp27-cp27mu-manylinux1_x86_64.whl</span><br><span class="line">$ pip install torchvision</span><br></pre></td></tr></table></figure><h1 id="Install-Python-IDE-PyCharm"><a href="#Install-Python-IDE-PyCharm" class="headerlink" title="Install Python IDE (PyCharm)"></a>Install Python IDE (PyCharm)</h1><p>PyCharm 是一個可以寫 Python 的 IDE，雖然專業版要錢，不過學生免費～YA！</p><p>安裝就不贅述了，反正就是一直下一步…</p><h2 id="設定使用遠端-Python"><a href="#設定使用遠端-Python" class="headerlink" title="設定使用遠端 Python"></a>設定使用遠端 Python</h2><p>由於要用 WSL 裡面的 python，所以必須設定 Remote Python Interpreter</p><ol><li>Project setting &gt; Project interpreter</li><li>Add Remote</li><li>填入 ssh 資訊</li></ol>    <div>      <img src="/img/2017-09-27/02.png" alt="填一填 ssh 相關資訊。" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">填一填 ssh 相關資訊。</span>    </div><p>由於是要透過 ssh 去存取 WSL 中的 Python ，所以 WSL 那邊要開啟 ssh service 好讓 PyCharm 連線。</p><p>在 WSL 中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service ssh start</span><br><span class="line">  * Starting OpenBSD Secure Shell server sshd [ OK ]</span><br></pre></td></tr></table></figure><h2 id="設定-Path-mappings"><a href="#設定-Path-mappings" class="headerlink" title="設定 Path mappings"></a>設定 Path mappings</h2><p>WSL 其實是可以存取本機 (Windows) 的資料的，預設 C 槽是掛載在 <code>/mnt/c</code><br>這也要設定一下才能讓 PyCharm 運作正常：</p><ol><li>Project setting &gt; Project interpreter</li><li>新增 mapping <code>C: → /mnt/c</code></li></ol>    <div>      <img src="/img/2017-09-27/03.png" alt="設定 Path mapping 的地方也是在 Project setting > Project interpreter" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">設定 Path mapping 的地方也是在 Project setting > Project interpreter</span>    </div><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="開啟-ssh-service-時噴錯"><a href="#開啟-ssh-service-時噴錯" class="headerlink" title="開啟 ssh service 時噴錯"></a>開啟 ssh service 時噴錯</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service ssh start</span><br><span class="line">initctl: Unable to connect to Upstart</span><br><span class="line">Bind to port 22 on 0.0.0.0 failed: Address already <span class="keyword">in</span> use.</span><br></pre></td></tr></table></figure><p>去更改 <code>/etc/ssh/sshd_config</code> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication <span class="built_in">yes</span></span><br><span class="line">UsePrivilegeSeparation no</span><br><span class="line">Port &lt;random number&gt;</span><br></pre></td></tr></table></figure><p>基本上最重要的就是換個 Port 了，會沒辦法啟動大概是本機 (Windows) 有程式已經占用 Port 22 了。</p><h2 id="不能安裝-PyTorch"><a href="#不能安裝-PyTorch" class="headerlink" title="不能安裝 PyTorch"></a>不能安裝 PyTorch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install torch-xxx.whl</span><br><span class="line">torch-xxx.whl is not a supported wheel on this platform.</span><br></pre></td></tr></table></figure><p>請檢察 <code>pip -V</code> 版本，起碼要是 9.0 以上，可以用以下方法更新 <code>pip</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://blog.birkhoff.me/bash_on_windows_installation/">Windows Subsystem for Linux (WSL) 安裝教學 &amp; 初體驗</a></li><li><a href="https://www.jetbrains.com/help/pycharm/configuring-remote-interpreters-via-wsl.html">Configuring Remote Interpreters via WSL</a></li></ol>  <style>  h1+ol {    list-style-type: none;    counter-reset: list-counter;    padding-left: 0;  }  h1+ol li {    position: relative;    padding-left: 3em;  }  h1+ol li::before {    counter-increment: list-counter;    content: "[" counter(list-counter) "] ";    position: absolute;    left: 0;    width: 25px;    text-align: right;  }  </style>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;最近開始在使用 PyTorch 寫些東東，他支援 MacOS&amp;#x2F;Linux 使用，唯獨 Windows 不支援…&lt;br&gt;所以我一直都是使用 Mac 寫相關的東西。&lt;/p&gt;
&lt;p&gt;但是我的桌機都是 Windows，在可以用桌機的環境下卻必須使用小小的 Mac 打字真的不是很高興…&lt;br&gt;正好最近從學長那邊得知有個方法可以讓 Windows 使用 PyTorch ，就趕緊來試試！&lt;/p&gt;</summary>
    
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
    <category term="note" scheme="https://ssarcandy.tw/tags/note/"/>
    
    <category term="python" scheme="https://ssarcandy.tw/tags/python/"/>
    
    <category term="pytorch" scheme="https://ssarcandy.tw/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Multi-server GPU status monitor</title>
    <link href="https://ssarcandy.tw/2017/08/25/multi-server-gpu-status-monitor/"/>
    <id>https://ssarcandy.tw/2017/08/25/multi-server-gpu-status-monitor/</id>
    <published>2017-08-25T15:29:39.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>隨著實驗室 GPU 資源日益增加，<br>有越來越多人在抱怨搶不到 GPU、不知道哪台有空的 GPU 、有人佔用太多 GPU 資源等等問題，<br>這些問題似乎跟沒有一個方法可以「一目瞭然的知道所有 GPU 的狀況」有關。</p><p>對，就像是 <a href="https://www.cmlab.csie.ntu.edu.tw/status/">cml-status</a> 一樣，<br>假設有個 GPU 版的 <a href="https://www.cmlab.csie.ntu.edu.tw/status/">cml-status</a>，應該就可以讓大家更輕易地找到閒置的 GPU，如果有人佔用過多運算資源也容易發現。</p><p>於是 <a href="https://www.cmlab.csie.ntu.edu.tw/status-gpu/">CMLab GPU Status</a> 就誕生拉~</p><span id="more"></span><h1 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h1><p>由於我們有數台伺服器是有 GPU 資源的，所以要做出一個網頁版的監控系統大概要有兩個步驟:</p><ol><li>彙整各台資訊到某一台 server</li><li>將這些資訊轉成網頁形式呈現</li></ol><p>對於第一點大概有兩種做法，一是主動去取得資訊，也就是透過 ssh 登入到各個有 GPU 的伺服器詢問資訊；二是各個有 GPU 的伺服器各自回報資訊給某一台來彙整。</p><p>而主動去取得資訊的方法有幾個缺點，</p><ul><li>透過 ssh 登入需要密碼，當然可以透過建立 ssh 認證來省去這一步，但好麻煩 _:(´□&#96;」 ∠):_</li><li>這種方法會使得事情都是一台伺服器在做(又要登入各台又要彙整資訊)，感覺不是很人道…</li></ul><p>另一個方法則是「各自回報，統一呈現」，<br>就是大家各自回報 GPU 狀況，<br>然後由 web server 統一彙整資訊，<br>這種感覺就比較人道一點，大家一起分擔工作~</p><h1 id="各自回報，統一呈現"><a href="#各自回報，統一呈現" class="headerlink" title="各自回報，統一呈現"></a>各自回報，統一呈現</h1><p>決定了大方向的做法以後，可以繼續切分整件事情的流程:</p><ol><li>各台機器如何回報?回報去哪?</li><li>如何彙整?</li><li>如何以網頁呈現?</li></ol><h2 id="各台機器如何回報、回報去哪？"><a href="#各台機器如何回報、回報去哪？" class="headerlink" title="各台機器如何回報、回報去哪？"></a>各台機器如何回報、回報去哪？</h2>    <div>      <img src="/img/2017-08-25/1.jpg" alt="實驗室每台伺服器都有共用一個 NFS" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">實驗室每台伺服器都有共用一個 NFS</span>    </div><p>幸好我們的 server 都有用 NFS ，所以各自回報到 NFS 上就可以讓其他台存取到資訊了。<br>那獲得 GPU 資訊的方法不外乎就是下 <code>nvidia-smi</code> 來取得囉，但說真的這指令太豐富了，所以我改用別的神人做的指令 <a href="https://github.com/wookayin/gpustat">gpustat</a>，輸出就乾淨多了~</p>    <div>      <img src="/img/2017-08-25/2.jpg" alt="gpustat sample output" data-action="zoom" class="photozoom">      <span class="zoom-initial-caption">gpustat sample output</span>    </div><p>所以每一台 GPU server 要做的是「每分鐘回報一次 GPU status 並存至 NFS」，可以透過 <code>crontab</code> 註冊:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crontab on each GPU server</span></span><br><span class="line">* * * * * /usr/local/bin/gpustat -pcu &gt; /NFS/status-gpu/$(hostname)</span><br></pre></td></tr></table></figure><h2 id="如何彙整？"><a href="#如何彙整？" class="headerlink" title="如何彙整？"></a>如何彙整？</h2><p>剛好我們 server 名子都是很沒創意的 cml*，所以彙整相當簡單。<br>由於各自回報的關係，在 NFS 上會有如下的檔案:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 875 Aug 25 23:04 cml10</span><br><span class="line">-rw-r--r-- 1 root root 940 Aug 25 23:04 cml11</span><br><span class="line">-rw-r--r-- 1 root root 169 Aug 25 23:04 cml14</span><br><span class="line">-rw-r--r-- 1 root root 682 Aug 25 23:04 cml16</span><br><span class="line">-rw-r--r-- 1 root root 746 Aug 25 23:04 cml19</span><br><span class="line">-rw-r--r-- 1 root root 364 Aug 25 23:04 cml21</span><br><span class="line">-rw-r--r-- 1 root root 169 Aug 25 23:04 cml22</span><br><span class="line">-rw-r--r-- 1 root root 620 Aug 25 23:04 cml23</span><br><span class="line">-rw-r--r-- 1 root root 748 Aug 25 23:04 cml24</span><br><span class="line">-rw-r--r-- 1 root root 747 Aug 25 23:04 cml25</span><br></pre></td></tr></table></figure><p>那要彙整就下個 <code>cat cml*</code> 就解決了。</p><h2 id="如何以網頁呈現？"><a href="#如何以網頁呈現？" class="headerlink" title="如何以網頁呈現？"></a>如何以網頁呈現？</h2><p>最後有了彙整後的資訊後該如何呈現置網頁上呢?<br>由於我們的 web server 有 apache，所以基本上只要多搞個資料夾底下有 <code>index.html</code>就可以了。<br>所以只要想辦法將彙整的資訊轉成 html 即可。</p><p>網路上大神很多，我又發現了 <a href="http://www.pixelbeat.org/scripts/ansi2html.sh">ansi2html.sh</a> ，這工具可以把 terminal output 轉成 html ，並且連顏色都幫你轉成 css ，太神拉~</p><p>所以要變成網頁呈現就可以註冊個 <code>crontab</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crontab on web server</span></span><br><span class="line">* * * * * <span class="built_in">cat</span> /status-gpu/cml* | /bin/sh ansi2html.sh &gt; index.html</span><br></pre></td></tr></table></figure><p>每分鐘重新刷新 <code>index.html</code></p><h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h1><p>做好以後還是逃不掉 BUG 的摧殘QQ<br>有時候會發現彙整的資訊會缺少某幾台 GPU server 的資訊</p><p>查來查去發現原來是因為 <code>crontab</code> 註冊的時間一樣(都是每分鐘)，再加上 NFS 是透過網路傳輸所以會比較慢，導致各自機器每分鐘回報狀況時檔案還沒寫入，web server 就執行彙整動作，就會出現缺檔的情形。<br>解決方式很簡單，就是彙整時間稍微延遲一點，讓各自回報有時間完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crontab on web server</span></span><br><span class="line">* * * * * <span class="built_in">sleep</span> 30 &amp;&amp; <span class="built_in">cat</span> /status-gpu/cml* | /bin/sh ansi2html.sh &gt; index.html</span><br></pre></td></tr></table></figure><p>用 sleep 即可延遲指令。</p><hr><p>雜談</p><ul><li>差點這個月就要開天窗了…</li><li>大力募集網管中!</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;隨著實驗室 GPU 資源日益增加，&lt;br&gt;有越來越多人在抱怨搶不到 GPU、不知道哪台有空的 GPU 、有人佔用太多 GPU 資源等等問題，&lt;br&gt;這些問題似乎跟沒有一個方法可以「一目瞭然的知道所有 GPU 的狀況」有關。&lt;/p&gt;
&lt;p&gt;對，就像是 &lt;a href=&quot;https://www.cmlab.csie.ntu.edu.tw/status/&quot;&gt;cml-status&lt;/a&gt; 一樣，&lt;br&gt;假設有個 GPU 版的 &lt;a href=&quot;https://www.cmlab.csie.ntu.edu.tw/status/&quot;&gt;cml-status&lt;/a&gt;，應該就可以讓大家更輕易地找到閒置的 GPU，如果有人佔用過多運算資源也容易發現。&lt;/p&gt;
&lt;p&gt;於是 &lt;a href=&quot;https://www.cmlab.csie.ntu.edu.tw/status-gpu/&quot;&gt;CMLab GPU Status&lt;/a&gt; 就誕生拉~&lt;/p&gt;</summary>
    
    
    <content src="https://ssarcandy.tw/img/2017-08-25/1.jpg" type="image"/>
    
    
    
    <category term="unix" scheme="https://ssarcandy.tw/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>接案三兩事</title>
    <link href="https://ssarcandy.tw/2017/07/21/about-taking-case/"/>
    <id>https://ssarcandy.tw/2017/07/21/about-taking-case/</id>
    <published>2017-07-21T11:06:10.000Z</published>
    <updated>2024-11-22T00:45:40.453Z</updated>
    
    <content type="html"><![CDATA[<p>最近終於結束了一個搞了很久的 case 。<br>我其實沒什麼接案經驗，這次也是剛好算是學校單位找我做個活動的宣傳網站，我心想既然是學校的應該也不太容易被騙，就來試試看所謂的接案。<br>在這次經驗中其實也是學到不少東西、踩了很多雷，大部份都是因為沒什麼經驗導致踩到的很多很多算專案管理相關的雷。<br>如果還有下次的話，一定要注意一些事情才可以讓整個案子的進行更加順利。</p><span id="more"></span><h1 id="一定要寫好合約"><a href="#一定要寫好合約" class="headerlink" title="一定要寫好合約"></a>一定要寫好合約</h1><p>這看起來是基本中的基本，但我當初就是沒做(掩面<br>當初只有口頭說好而已。<br>這件事情之所以重要，是因為這是個最基本的保障，不論是對我們或是對客戶方，<br>和約可以說清楚講明白我們到底要做什麼?哪些是我們的負責範圍、哪些不是?<br>然後當然還有其他的細節，包含價格，時程等等都應該要寫在合約。</p><h1 id="一定要訂好時程"><a href="#一定要訂好時程" class="headerlink" title="一定要訂好時程"></a>一定要訂好時程</h1><p>在這次的案子中我遇到最大的問題就是：我們開發好了 ，但是客戶卻一直沒時間驗收，導致每次來回 feedback 就可能拖了好幾個月。</p><p>這樣造成很多問題一個是實在是拖太久了，隔好幾個月才又重起專案做起來真的很煩；另一方面客戶方也會覺得我們做得很慢。因為我們做出來的東西不一定是客戶想要的，一來一回修正就花掉太多時間，整體而言就會有我們也開發得很慢的感覺。</p><p>如果當初可以在合約中訂好幾次 check point 的時間點，至少就可以確保不會無限期拖延下去。</p><h1 id="一定要找好對口"><a href="#一定要找好對口" class="headerlink" title="一定要找好對口"></a>一定要找好對口</h1><p>我這邊指得對口是指:「 可以快速獲得 feedback 的人」。<br>因為我們這一次的開發包含了所有的設計，都是我們負責。但是呢，扯到設計這種比較主觀的東西，我們做出來的並不一定客戶接受。所以與其等到 check point 再來被客戶打槍要求重做，不如當初就先確保一個客戶方的對口，才可以在我們做 prototype 時就迅速的確認到底是不是符合他們想要的。</p><p>簡單來說，確認對口就是可以使我們少做很多白工。</p><h1 id="不要使用別人不熟悉的工具"><a href="#不要使用別人不熟悉的工具" class="headerlink" title="不要使用別人不熟悉的工具"></a>不要使用別人不熟悉的工具</h1><p>這個點其實跟上一點有一點關係。案子開發到後期勢必是有一些 BUG 或其他要調整的部分。所以也是必須要追蹤這些 issue。<br>那當然大家都認為 github issue tracker 很好用很棒，但事實上客戶這邊根本不會使用這種工具，最後就會變成他們根本沒在看。<br>所以與其用我們工程師覺得好用的工具，不如使用大家都會用的工具。像是在這一次的案子裡我的 issue tracker 是簡單的用 Google sheet 拉一拉表格，這樣反而更能讓客戶清楚知道我們的進度。</p><p>即時通訊也是，工程師可能覺得 Slack 很棒很適合案子的溝通，但事實上就是客戶那邊永遠都不會上線 XD<br>所以反而使用私人的 Facebook Messanger 還比較有效率。</p><h1 id="錢的事情要講清楚"><a href="#錢的事情要講清楚" class="headerlink" title="錢的事情要講清楚"></a>錢的事情要講清楚</h1><p>有一件事情我體會深刻，就是「錢的事情一定要講清楚」。<br>也不要覺得自己的開價會不會太貴，因為會不會太貴是客戶那邊該煩惱的 XD<br>雖然每一個案子可能順利的程度不同，但是我個人認為接案一定會比想像中的麻煩。<br>所以在錢的方面一定要開一個確保自己不會做到覺得「很不划算」。<br>具體而言大概就是你覺得可以的價格再乘以 1.5 倍，到時候你會覺得這才只是「剛剛好的價格」。</p><p>另外，錢也是應該要有先付、後付的部分，才比較有點保障，至少不會一毛錢都拿不到的風險。<br>像我這一次的案子就因為也沒有寫合約所以最後變成是結案了才要付錢，那這樣子其實對於接案方非常虧，因為他們隨時可以突然說案子不要做了，然後我就會變成做一堆但啥都拿不到。</p><p>總而言之，錢的事情就幾個原則：</p><ol><li>開一個比自己覺得 ok 的價格高一點的價格，因為接案的過程肯定會比想像中的麻煩。</li><li>先付後付、怎麼分配都應該於一開始的合約中訂好。</li></ol><hr><p>雜談</p><ul><li>自從決定要弄個部落格以後，就一直督促自己一個月起碼要寫個一篇文章，自今也滿一年了，可喜可賀～</li><li>最近剛修正了身體的一個 BUG，看來要痛苦一陣子了。</li><li>正事依舊沒啥進展，果然我吃草吃太久了QQ</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近終於結束了一個搞了很久的 case 。&lt;br&gt;我其實沒什麼接案經驗，這次也是剛好算是學校單位找我做個活動的宣傳網站，我心想既然是學校的應該也不太容易被騙，就來試試看所謂的接案。&lt;br&gt;在這次經驗中其實也是學到不少東西、踩了很多雷，大部份都是因為沒什麼經驗導致踩到的很多很多算專案管理相關的雷。&lt;br&gt;如果還有下次的話，一定要注意一些事情才可以讓整個案子的進行更加順利。&lt;/p&gt;</summary>
    
    
    
    
    <category term="trashtalk" scheme="https://ssarcandy.tw/tags/trashtalk/"/>
    
  </entry>
  
</feed>
